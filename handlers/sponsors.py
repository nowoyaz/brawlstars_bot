from aiogram import types
from aiogram.dispatcher import Dispatcher, FSMContext
from database.crud import get_sponsors, check_user_subscription, add_user_subscription, get_user_by_id
from keyboards.inline_keyboard import sponsors_list_keyboard, back_to_menu_keyboard
from utils.helpers import get_user_language, check_channel_subscription
import logging

logger = logging.getLogger(__name__)

async def cmd_sponsors(message: types.Message, locale):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –ø–æ–∫–∞–∑–∞ —Å–ø–æ–Ω—Å–æ—Ä–æ–≤"""
    user_locale = get_user_language(message.from_user.id)
    
    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–ø–æ–Ω—Å–æ—Ä–æ–≤
    sponsors = get_sponsors(only_active=True)
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–µ–º–∏—É–º-—Å—Ç–∞—Ç—É—Å–∞
    user = get_user_by_id(message.from_user.id)
    
    # –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å –ø—Ä–µ–º–∏—É–º, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Å–æ–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if user and user.is_premium:
        text = f"{user_locale['sponsors_title']}\n\n{user_locale['sponsors_premium_description']}"
        await message.answer(text, reply_markup=back_to_menu_keyboard(user_locale))
        return
    
    if not sponsors:
        text = f"{user_locale['sponsors_title']}\n\n{user_locale['no_sponsors']}"
        await message.answer(text, reply_markup=back_to_menu_keyboard(user_locale))
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_subscriptions = [
        sub.sponsor_id for sub in check_user_subscription(message.from_user.id)
    ]
    
    text = f"{user_locale['sponsors_title']}\n\n{user_locale['sponsors_description']}"
    
    # –í—ã–≤–æ–¥–∏–º —Å–ø–∏—Å–æ–∫ —Å–ø–æ–Ω—Å–æ—Ä–æ–≤ –∏ –∫–Ω–æ–ø–∫–∏
    await message.answer(
        text,
        reply_markup=sponsors_list_keyboard(user_locale, sponsors, message.from_user.id, user_subscriptions)
    )

async def process_check_subscription(callback: types.CallbackQuery, state: FSMContext, locale):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —Å–ø–æ–Ω—Å–æ—Ä–∞"""
    user_locale = get_user_language(callback.from_user.id)
    
    # –ü–æ–ª—É—á–∞–µ–º ID —Å–ø–æ–Ω—Å–æ—Ä–∞ –∏–∑ callback_data
    sponsor_id = int(callback.data.split(":")[1])
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–æ–Ω—Å–æ—Ä–∞
    sponsors = get_sponsors(only_active=True)
    sponsor = next((s for s in sponsors if s.id == sponsor_id), None)
    
    if not sponsor:
        await callback.answer(user_locale["sponsor_not_found"], show_alert=True)
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–¥–ø–∏—Å–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    user_subscriptions = [
        sub.sponsor_id for sub in check_user_subscription(callback.from_user.id)
    ]
    
    if sponsor_id in user_subscriptions:
        await callback.answer(user_locale["already_subscribed"], show_alert=True)
        return
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å–ø–æ–Ω—Å–æ—Ä–µ
    text = user_locale["check_subscription_text"].format(name=sponsor.name)
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –ø–æ —Å—Å—ã–ª–∫–µ –∏ –∫–Ω–æ–ø–∫–∞–º–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è/–æ—Ç–º–µ–Ω—ã
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —Å –ø—Ä—è–º–æ–π —Å—Å—ã–ª–∫–æ–π –Ω–∞ –∫–∞–Ω–∞–ª —Å–ø–æ–Ω—Å–æ—Ä–∞
    keyboard.add(types.InlineKeyboardButton(text=f"üì£ {sponsor.name}", url=sponsor.link))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
    keyboard.add(types.InlineKeyboardButton(
        text=user_locale["confirm_subscription"],
        callback_data=f"confirm_subscription:{sponsor_id}"
    ))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Å–ø–∏—Å–∫—É —Å–ø–æ–Ω—Å–æ—Ä–æ–≤
    keyboard.add(types.InlineKeyboardButton(
        text=user_locale["back_to_sponsors"],
        callback_data="show_sponsors"
    ))
    
    await callback.message.edit_text(text, reply_markup=keyboard)

async def process_confirm_subscription(callback: types.CallbackQuery, state: FSMContext, locale):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —Å–ø–æ–Ω—Å–æ—Ä–∞"""
    user_locale = get_user_language(callback.from_user.id)
    
    # –ü–æ–ª—É—á–∞–µ–º ID —Å–ø–æ–Ω—Å–æ—Ä–∞ –∏–∑ callback_data
    sponsor_id = int(callback.data.split(":")[1])
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–æ–Ω—Å–æ—Ä–∞
    sponsors = get_sponsors(only_active=True)
    sponsor = next((s for s in sponsors if s.id == sponsor_id), None)
    
    if not sponsor:
        await callback.answer(user_locale["sponsor_not_found"], show_alert=True)
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –∫–∞–Ω–∞–ª —Å–ø–æ–Ω—Å–æ—Ä–∞
    is_subscribed = False
    try:
        # –ï—Å–ª–∏ —É –Ω–∞—Å –µ—Å—Ç—å channel_id, –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É —á–µ—Ä–µ–∑ Telegram API
        if hasattr(sponsor, 'channel_id') and sponsor.channel_id:
            is_subscribed = await check_channel_subscription(callback.bot, callback.from_user.id, sponsor.channel_id)
        else:
            # –ò–Ω–∞—á–µ –ø—Ä–æ—Å—Ç–æ –¥–æ–≤–µ—Ä—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            is_subscribed = True
        
        if not is_subscribed:
            await callback.answer(user_locale["sponsor_not_subscribed"], show_alert=True)
            return
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
        add_user_subscription(callback.from_user.id, sponsor_id)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–µ
        text = user_locale["subscription_success"].format(name=sponsor.name)
        
        await callback.message.edit_text(
            text,
            reply_markup=types.InlineKeyboardMarkup().add(
                types.InlineKeyboardButton(
                    text=user_locale["back_to_sponsors"],
                    callback_data="show_sponsors"
                )
            )
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏: {str(e)}")
        await callback.answer(user_locale["subscription_error"], show_alert=True)

async def process_show_sponsors(callback: types.CallbackQuery, state: FSMContext, locale):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Å–ø–∏—Å–∫—É —Å–ø–æ–Ω—Å–æ—Ä–æ–≤"""
    user_locale = get_user_language(callback.from_user.id)
    
    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–ø–æ–Ω—Å–æ—Ä–æ–≤
    sponsors = get_sponsors(only_active=True)
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–µ–º–∏—É–º-—Å—Ç–∞—Ç—É—Å–∞
    user = get_user_by_id(callback.from_user.id)
    
    # –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å –ø—Ä–µ–º–∏—É–º, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Å–æ–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if user and user.is_premium:
        text = f"{user_locale['sponsors_title']}\n\n{user_locale['sponsors_premium_description']}"
        await callback.message.edit_text(text, reply_markup=back_to_menu_keyboard(user_locale))
        return
    
    if not sponsors:
        text = f"{user_locale['sponsors_title']}\n\n{user_locale['no_sponsors']}"
        await callback.message.edit_text(text, reply_markup=back_to_menu_keyboard(user_locale))
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_subscriptions = [
        sub.sponsor_id for sub in check_user_subscription(callback.from_user.id)
    ]
    
    text = f"{user_locale['sponsors_title']}\n\n{user_locale['sponsors_description']}"
    
    # –í—ã–≤–æ–¥–∏–º —Å–ø–∏—Å–æ–∫ —Å–ø–æ–Ω—Å–æ—Ä–æ–≤ –∏ –∫–Ω–æ–ø–∫–∏
    await callback.message.edit_text(
        text,
        reply_markup=sponsors_list_keyboard(user_locale, sponsors, callback.from_user.id, user_subscriptions)
    )

def register_handlers_sponsors(dp: Dispatcher, locale):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è —Å–ø–æ–Ω—Å–æ—Ä–æ–≤"""
    dp.register_message_handler(lambda message: cmd_sponsors(message, locale), commands=["sponsors"])
    dp.register_callback_query_handler(
        lambda c, state: process_check_subscription(c, state, locale),
        lambda c: c.data.startswith("check_subscription:")
    )
    dp.register_callback_query_handler(
        lambda c, state: process_confirm_subscription(c, state, locale),
        lambda c: c.data.startswith("confirm_subscription:")
    )
    dp.register_callback_query_handler(
        lambda c, state: process_show_sponsors(c, state, locale),
        lambda c: c.data == "show_sponsors"
    ) 