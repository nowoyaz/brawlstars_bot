from aiogram import types
from aiogram.dispatcher import Dispatcher
from utils.helpers import update_user_language, ensure_user_exists
from keyboards.inline_keyboard import language_keyboard, inline_main_menu_keyboard
from utils.helpers import get_user_language

async def cmd_language(callback: types.CallbackQuery, locale):
    locale = get_user_language(callback.from_user.id)
    await callback.answer()
    # –¢–µ–∫—Å—Ç –º–æ–∂–Ω–æ –≤—ã–Ω–µ—Å—Ç–∏ –≤ JSON, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ. –ó–¥–µ—Å—å –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞:
    text = "üåê –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:"  # –∏–ª–∏ locale["language_text"] –µ—Å–ª–∏ —Ç–∞–∫–æ–π –∫–ª—é—á –¥–æ–±–∞–≤–∏—Ç–µ –≤ JSON
    kb = language_keyboard(locale)
    await callback.message.edit_text(text, reply_markup=kb)

async def set_language(callback: types.CallbackQuery, locale):
    await callback.answer()
    data = callback.data.split(":")
    if len(data) >= 2:
        lang = data[1]  # "ru" –∏–ª–∏ "eng"
        # –û–±–Ω–æ–≤–ª—è–µ–º —è–∑—ã–∫ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        update_user_language(callback.from_user.id, lang)
        # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
        ensure_user_exists(callback.from_user.id, callback.from_user.username or callback.from_user.full_name)
        # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏—é
        new_locale = get_user_language(callback.from_user.id)
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏—é –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–µ–Ω—é
        await callback.message.edit_text(
            new_locale["language_changed"],
            reply_markup=inline_main_menu_keyboard(new_locale)
        )

def register_handlers_language(dp: Dispatcher, locale):
    dp.register_callback_query_handler(lambda call: cmd_language(call, locale), lambda c: c.data == "language")
    dp.register_callback_query_handler(lambda call: set_language(call, locale), lambda c: c.data.startswith("set_language:"))
