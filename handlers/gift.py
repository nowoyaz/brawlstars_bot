import random
import datetime
from aiogram import types
from aiogram.dispatcher import Dispatcher
from database.session import SessionLocal
from database.models import User
from keyboards.inline_keyboard import inline_main_menu_keyboard, gift_keyboard
from utils.helpers import get_user_language, check_channel_subscription, is_user_premium, check_all_sponsor_subscriptions, record_section_visit, check_gift_achievement
from database.crud import get_sponsors, check_user_subscription, get_user_by_id, update_user_last_gift, add_user_crystals, add_coins_to_user

async def cmd_gift(callback: types.CallbackQuery, locale):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ '–ü–æ–¥–∞—Ä–æ–∫'"""
    locale = get_user_language(callback.from_user.id)
    await callback.answer()
    
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –ø–æ—Å–µ—â–µ–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–∞
    record_section_visit(callback.from_user.id, "gift")
    
    text = locale["gift_text"]
    kb = gift_keyboard(locale)
    await callback.message.edit_text(text, reply_markup=kb)

async def process_receive_gift(callback: types.CallbackQuery, locale):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥–∞—Ä–∫–∞"""
    locale = get_user_language(callback.from_user.id)
    await callback.answer()
    
    session = SessionLocal()
    user = session.query(User).filter(User.tg_id == callback.from_user.id).first()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ —Å–ø–æ–Ω—Å–æ—Ä–æ–≤ –∏–ª–∏ –Ω–∞–ª–∏—á–∏–µ –ø—Ä–µ–º–∏—É–º-—Å—Ç–∞—Ç—É—Å–∞
    is_premium = is_user_premium(callback.from_user.id)
    has_all_subscriptions = check_all_sponsor_subscriptions(callback.from_user.id)
    
    if not is_premium and not has_all_subscriptions:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–ø–æ–Ω—Å–æ—Ä–æ–≤
        sponsors = get_sponsors(is_active_only=True)
        if sponsors:
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ —Å–ø–∏—Å–∫–æ–º —Å–ø–æ–Ω—Å–æ—Ä–æ–≤
            kb = types.InlineKeyboardMarkup(row_width=1)
            for sponsor in sponsors:
                if not check_user_subscription(callback.from_user.id, sponsor.id):
                    kb.add(types.InlineKeyboardButton(
                        text=f"üëâ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ {sponsor.name}",
                        url=sponsor.link
                    ))
            kb.add(types.InlineKeyboardButton(
                text=locale.get("check_subscriptions", "üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏"),
                callback_data="receive_gift"
            ))
            kb.add(types.InlineKeyboardButton(
                text=locale.get("back_to_menu", "‚óÄÔ∏è –í –º–µ–Ω—é"),
                callback_data="back_to_main"
            ))
            
            text = locale["gift_sponsors_required"]
            await callback.message.edit_text(text, reply_markup=kb)
            session.close()
            return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–ª—É—á–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–∞—Ä–æ–∫ —Å–µ–≥–æ–¥–Ω—è
    today = datetime.datetime.now().date()
    if user.last_gift and user.last_gift.date() == today:
        text = locale["gift_time_error"]
        await callback.message.edit_text(text, reply_markup=inline_main_menu_keyboard(locale))
        session.close()
        return
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–Ω–µ—Ç
    amount = random.randint(10, 50)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–æ–¥–∞—Ä–∫–∞ –∏ –±–∞–ª–∞–Ω—Å –º–æ–Ω–µ—Ç
    update_user_last_gift(callback.from_user.id)
    add_coins_to_user(callback.from_user.id, amount)
    
    # –í—ã–¥–∞–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ "–ò—Å–ø—ã—Ç–∞—Ç—å —É–¥–∞—á—É"
    check_gift_achievement(callback.from_user.id)
    
    text = locale["gift_success"].format(amount=amount)
    await callback.message.edit_text(text, reply_markup=inline_main_menu_keyboard(locale))
    session.close()

async def process_gift_back(callback: types.CallbackQuery, locale):
    locale = get_user_language(callback.from_user.id)
    await callback.answer()
    await callback.message.edit_text(locale["menu_text"], reply_markup=inline_main_menu_keyboard(locale))

def register_handlers_gift(dp: Dispatcher, locale):
    dp.register_callback_query_handler(lambda call: cmd_gift(call, locale), lambda c: c.data == "gift")
    dp.register_callback_query_handler(lambda call: process_receive_gift(call, locale), lambda c: c.data == "receive_gift")
    dp.register_callback_query_handler(lambda call: process_gift_back(call, locale), lambda c: c.data == "back_to_main")
