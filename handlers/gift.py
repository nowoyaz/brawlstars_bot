import random
import datetime
import logging
from aiogram import types
from aiogram.dispatcher import Dispatcher
from database.session import SessionLocal
from database.models import User
from keyboards.inline_keyboard import inline_main_menu_keyboard, gift_keyboard
from utils.helpers import get_user_language, check_channel_subscription, is_user_premium, check_all_sponsor_subscriptions, record_section_visit, check_gift_achievement
from database.crud import get_sponsors, check_user_subscription, get_user_by_id, update_user_last_gift, add_user_crystals, add_coins_to_user, add_user_subscription

logger = logging.getLogger(__name__)

async def cmd_gift(callback: types.CallbackQuery, locale):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ '–ü–æ–¥–∞—Ä–æ–∫'"""
    locale = get_user_language(callback.from_user.id)
    await callback.answer()
    
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –ø–æ—Å–µ—â–µ–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–∞
    record_section_visit(callback.from_user.id, "gift")
    
    text = locale["gift_text"]
    kb = gift_keyboard(locale)
    await callback.message.edit_text(text, reply_markup=kb)

async def process_receive_gift(callback: types.CallbackQuery, locale):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥–∞—Ä–∫–∞"""
    user_id = callback.from_user.id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª –ø–æ–¥–∞—Ä–æ–∫")
    
    locale = get_user_language(user_id)
    await callback.answer()
    
    session = SessionLocal()
    user = session.query(User).filter(User.tg_id == user_id).first()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ —Å–ø–æ–Ω—Å–æ—Ä–æ–≤ –∏–ª–∏ –Ω–∞–ª–∏—á–∏–µ –ø—Ä–µ–º–∏—É–º-—Å—Ç–∞—Ç—É—Å–∞
    is_premium = is_user_premium(user_id)
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø—Ä–µ–º–∏—É–º: {is_premium}")
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–ø–æ–Ω—Å–æ—Ä–æ–≤
    sponsors = get_sponsors(is_active_only=True)
    logger.info(f"–ù–∞–π–¥–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–ø–æ–Ω—Å–æ—Ä–æ–≤: {len(sponsors)}")
    
    if not is_premium and sponsors:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª—ã
        kb = types.InlineKeyboardMarkup(row_width=1)
        has_all_subscriptions = True
        unsubscribed_sponsors = []
        
        for sponsor in sponsors:
            logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–∞ —Å–ø–æ–Ω—Å–æ—Ä–∞ {sponsor.name} (ID: {sponsor.id})")
            if sponsor.channel_id:
                is_subscribed = await check_channel_subscription(callback.bot, user_id, sponsor.channel_id)
                logger.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ {sponsor.name}: {is_subscribed}")
                
                if is_subscribed:
                    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–ø–∏—Å–∞–Ω, –¥–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –±–∞–∑—É
                    add_user_subscription(user_id, sponsor.id)
                    logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω–∞ –∑–∞–ø–∏—Å—å –æ –ø–æ–¥–ø–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–∞ —Å–ø–æ–Ω—Å–æ—Ä–∞ {sponsor.name}")
                else:
                    has_all_subscriptions = False
                    unsubscribed_sponsors.append(sponsor)
                    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ —Å–ø–æ–Ω—Å–æ—Ä–∞ {sponsor.name}")
                    kb.add(types.InlineKeyboardButton(
                        text=f"üëâ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ {sponsor.name}",
                        url=sponsor.link
                    ))
        
        if not has_all_subscriptions:
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –≤—Å–µ—Ö —Å–ø–æ–Ω—Å–æ—Ä–æ–≤. –ù–µ–ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–µ —Å–ø–æ–Ω—Å–æ—Ä—ã: {[s.name for s in unsubscribed_sponsors]}")
            kb.add(types.InlineKeyboardButton(
                text=locale.get("check_subscriptions", "üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏"),
                callback_data="receive_gift"
            ))
            kb.add(types.InlineKeyboardButton(
                text=locale.get("back_to_menu", "‚óÄÔ∏è –í –º–µ–Ω—é"),
                callback_data="back_to_main"
            ))
            
            text = locale["gift_sponsors_required"]
            await callback.message.edit_text(text, reply_markup=kb)
            session.close()
            return
        else:
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –≤—Å–µ—Ö —Å–ø–æ–Ω—Å–æ—Ä–æ–≤")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–ª—É—á–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–∞—Ä–æ–∫ —Å–µ–≥–æ–¥–Ω—è
    today = datetime.datetime.now().date()
    if user.last_gift and user.last_gift.date() == today:
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–∂–µ –ø–æ–ª—É—á–∞–ª –ø–æ–¥–∞—Ä–æ–∫ —Å–µ–≥–æ–¥–Ω—è")
        text = locale["gift_time_error"]
        await callback.message.edit_text(text, reply_markup=inline_main_menu_keyboard(locale))
        session.close()
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫–∏ –µ—â–µ —Ä–∞–∑ –ø–µ—Ä–µ–¥ –≤—ã–¥–∞—á–µ–π –ø–æ–¥–∞—Ä–∫–∞
    if not is_premium and sponsors:
        logger.info(f"–í—Ç–æ—Ä–∏—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        has_all_subscriptions = True
        for sponsor in sponsors:
            if sponsor.channel_id:
                is_subscribed = await check_channel_subscription(callback.bot, user_id, sponsor.channel_id)
                logger.info(f"–í—Ç–æ—Ä–∏—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ {sponsor.name}: {is_subscribed}")
                if not is_subscribed:
                    has_all_subscriptions = False
                    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ —Å–ø–æ–Ω—Å–æ—Ä–∞ {sponsor.name} –ø—Ä–∏ –≤—Ç–æ—Ä–∏—á–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ")
                    break
        
        if not has_all_subscriptions:
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –ø—Ä–æ—à–µ–ª –≤—Ç–æ—Ä–∏—á–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ–¥–ø–∏—Å–æ–∫")
            text = locale["gift_sponsors_required"]
            await callback.message.edit_text(text, reply_markup=inline_main_menu_keyboard(locale))
            session.close()
            return
        else:
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø—Ä–æ—à–µ–ª –≤—Ç–æ—Ä–∏—á–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ–¥–ø–∏—Å–æ–∫")
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–Ω–µ—Ç
    amount = random.randint(10, 50)
    logger.info(f"–í—ã–¥–∞—á–∞ –ø–æ–¥–∞—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {amount} –º–æ–Ω–µ—Ç")
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–æ–¥–∞—Ä–∫–∞ –∏ –±–∞–ª–∞–Ω—Å –º–æ–Ω–µ—Ç
    update_user_last_gift(user_id)
    add_coins_to_user(user_id, amount)
    
    # –í—ã–¥–∞–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ "–ò—Å–ø—ã—Ç–∞—Ç—å —É–¥–∞—á—É"
    check_gift_achievement(user_id)
    
    text = locale["gift_success"].format(amount=amount)
    await callback.message.edit_text(text, reply_markup=inline_main_menu_keyboard(locale))
    session.close()

async def process_gift_back(callback: types.CallbackQuery, locale):
    locale = get_user_language(callback.from_user.id)
    await callback.answer()
    await callback.message.edit_text(locale["menu_text"], reply_markup=inline_main_menu_keyboard(locale))

def register_handlers_gift(dp: Dispatcher, locale):
    dp.register_callback_query_handler(lambda call: cmd_gift(call, locale), lambda c: c.data == "gift")
    dp.register_callback_query_handler(lambda call: process_receive_gift(call, locale), lambda c: c.data == "receive_gift")
    dp.register_callback_query_handler(lambda call: process_gift_back(call, locale), lambda c: c.data == "back_to_main")
