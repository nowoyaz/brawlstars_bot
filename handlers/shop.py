import logging
from aiogram import types
from aiogram.dispatcher import Dispatcher, FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from database.session import SessionLocal
from database.models import User
from keyboards.inline_keyboard import shop_keyboard, additional_keyboard, shop_premium_keyboard, back_to_shop_keyboard
from utils.achievements import check_and_award_achievements, check_premium_achievement
from utils.helpers import get_user_language, get_user_coins, update_user_coins, is_user_premium, update_user_premium
from database.crud import get_bot_setting, get_premium_prices
from datetime import datetime, timedelta, timezone

logger = logging.getLogger(__name__)

# –¶–µ–Ω—ã —Ç–æ–≤–∞—Ä–æ–≤
PRICES = {
    "premium_forever": 100000,
    "premium_week": 1000,
    "premium_day": 400,
    "secret_video": 2000
}

async def process_shop(callback: types.CallbackQuery, locale):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –º–∞–≥–∞–∑–∏–Ω–∞"""
    locale = get_user_language(callback.from_user.id)
    await callback.answer()
    
    text = locale["shop_text"]
    await callback.message.edit_text(text, reply_markup=shop_keyboard(locale))

async def process_shop_purchase(callback: types.CallbackQuery, locale):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–∫—É–ø–æ–∫ –≤ –º–∞–≥–∞–∑–∏–Ω–µ"""
    locale = get_user_language(callback.from_user.id)
    await callback.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø –ø–æ–∫—É–ø–∫–∏ –∏–∑ callback_data
    item_type = callback.data.split(":")[1]
    price = PRICES.get(item_type)
    
    if not price:
        await callback.message.edit_text(
            locale["purchase_error"].format(error="Invalid item"),
            reply_markup=shop_keyboard(locale)
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_coins = get_user_coins(callback.from_user.id)
    if user_coins < price:
        await callback.message.edit_text(
            locale["not_enough_coins"].format(balance=user_coins, price=price),
            reply_markup=shop_keyboard(locale)
        )
        return

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    kb = types.InlineKeyboardMarkup(row_width=2)
    kb.add(
        types.InlineKeyboardButton(
            text=locale.get("confirm", "‚úÖ –î–∞"),
            callback_data=f"confirm_purchase:{item_type}"
        ),
        types.InlineKeyboardButton(
            text=locale.get("cancel", "‚ùå –ù–µ—Ç"),
            callback_data="shop"
        )
    )

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –ø–æ–∫—É–ø–∫–∏
    if item_type == "premium_forever":
        item_name = "–ü—Ä–µ–º–∏—É–º –Ω–∞–≤—Å–µ–≥–¥–∞"
    elif item_type == "premium_week":
        item_name = "–ü—Ä–µ–º–∏—É–º –Ω–∞ –Ω–µ–¥–µ–ª—é"
    elif item_type == "premium_day":
        item_name = "–ü—Ä–µ–º–∏—É–º –Ω–∞ –¥–µ–Ω—å"
    elif item_type == "secret_video":
        item_name = "–°–µ–∫—Ä–µ—Ç–Ω—ã–π —Ä–æ–ª–∏–∫ –ë—É–±—Å–∞"
    
    confirm_text = locale.get(
        "buy_secret_confirm",
        "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å {name} –∑–∞ {price} –º–æ–Ω–µ—Ç?"
    ).format(name=item_name, price=price)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
    await callback.message.edit_text(confirm_text, reply_markup=kb)

async def process_confirm_purchase(callback: types.CallbackQuery, locale):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–∫—É–ø–∫–∏"""
    locale = get_user_language(callback.from_user.id)
    await callback.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø –ø–æ–∫—É–ø–∫–∏ –∏–∑ callback_data
    item_type = callback.data.split(":")[1]
    price = PRICES.get(item_type)
    
    try:
        # –°–ø–∏—Å—ã–≤–∞–µ–º –º–æ–Ω–µ—Ç—ã
        if not update_user_coins(callback.from_user.id, -price):
            await callback.message.edit_text(
                locale["purchase_error"].format(error="Failed to update coins"),
                reply_markup=shop_keyboard(locale)
            )
            return
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã –ø–æ–∫—É–ø–æ–∫
        if item_type == "premium_forever":
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–º–∏—É–º –Ω–∞–≤—Å–µ–≥–¥–∞
            update_user_premium(callback.from_user.id, None)  # None –æ–∑–Ω–∞—á–∞–µ—Ç "–Ω–∞–≤—Å–µ–≥–¥–∞"
            check_premium_achievement(callback.from_user.id)
        elif item_type == "premium_week":
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–º–∏—É–º –Ω–∞ –Ω–µ–¥–µ–ª—é
            expiry_date = datetime.now() + timedelta(days=7)
            update_user_premium(callback.from_user.id, expiry_date)
            check_premium_achievement(callback.from_user.id)
        elif item_type == "premium_day":
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–º–∏—É–º –Ω–∞ –¥–µ–Ω—å
            expiry_date = datetime.now() + timedelta(days=1)
            update_user_premium(callback.from_user.id, expiry_date)
            check_premium_achievement(callback.from_user.id)
        elif item_type == "secret_video":
            # –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Å–µ–∫—Ä–µ—Ç–Ω–æ–µ –≤–∏–¥–µ–æ –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫
            video_url = get_bot_setting("secret_video_url")
            if not video_url:
                video_url = "https://www.youtube.com/watch?v=dQw4w9WgXcQ"  # –î–µ—Ñ–æ–ª—Ç–Ω–∞—è —Å—Å—ã–ª–∫–∞
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Å–µ–∫—Ä–µ—Ç–Ω—ã–º –≤–∏–¥–µ–æ
            await callback.message.answer(
                f"üé¨ –°–µ–∫—Ä–µ—Ç–Ω—ã–π —Ä–æ–ª–∏–∫ –ë—É–±—Å–∞: {video_url}",
                reply_markup=shop_keyboard(locale)
            )
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
            await callback.message.delete()
            return
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π –ø–æ–∫—É–ø–∫–µ
        await callback.message.edit_text(
            locale["purchase_success"],
            reply_markup=shop_keyboard(locale)
        )
        
    except Exception as e:
        logger.error(f"Error processing purchase: {str(e)}")
        await callback.message.edit_text(
            locale["purchase_error"].format(error=str(e)),
            reply_markup=shop_keyboard(locale)
        )

async def process_back_to_additional(callback: types.CallbackQuery, locale):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –º–µ–Ω—é"""
    locale = get_user_language(callback.from_user.id)
    await callback.answer()
    await callback.message.edit_text(locale["additional_text"], reply_markup=additional_keyboard(locale))

async def process_premium_purchase(callback: types.CallbackQuery, state: FSMContext, locale):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∫—É–ø–∫–∏ –ø—Ä–µ–º–∏—É–º–∞"""
    user_locale = get_user_language(callback.from_user.id)
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø –ø—Ä–µ–º–∏—É–º–∞ –∏–∑ callback_data
    premium_type = callback.data.split(':')[1]
    
    # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—ã –Ω–∞ –ø—Ä–µ–º–∏—É–º
    prices = get_premium_prices()
    price = None
    days = None
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–µ–Ω—É –∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
    for p in prices:
        if premium_type == "forever" and p.duration_days == 36500:
            price = p.price
            days = p.duration_days
            break
        elif premium_type == "year" and p.duration_days == 365:
            price = p.price
            days = p.duration_days
            break
        elif premium_type == "half_year" and p.duration_days == 180:
            price = p.price
            days = p.duration_days
            break
        elif premium_type == "month" and p.duration_days == 30:
            price = p.price
            days = p.duration_days
            break
    
    if price is None:
        await callback.answer(user_locale["error_invalid_premium_type"], show_alert=True)
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_coins = get_user_coins(callback.from_user.id)
    
    if user_coins < price:
        # –ï—Å–ª–∏ –º–æ–Ω–µ—Ç –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ
        await callback.answer(user_locale["error_insufficient_coins"], show_alert=True)
        return
    
    try:
        # –°–ø–∏—Å—ã–≤–∞–µ–º –º–æ–Ω–µ—Ç—ã
        if not update_user_coins(callback.from_user.id, -price):
            await callback.answer(user_locale["error_purchase_failed"], show_alert=True)
            return
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–º–∏—É–º —Å—Ç–∞—Ç—É—Å
        if premium_type == "forever":
            # –î–ª—è –±–µ—Å—Å—Ä–æ—á–Ω–æ–≥–æ –ø—Ä–µ–º–∏—É–º–∞ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è None
            update_user_premium(callback.from_user.id, None)  # None –æ–∑–Ω–∞—á–∞–µ—Ç "–Ω–∞–≤—Å–µ–≥–¥–∞"
        else:
            # –î–ª—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –ø—Ä–µ–º–∏—É–º–∞ –≤—ã—á–∏—Å–ª—è–µ–º –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è
            expiry_date = datetime.now(timezone.utc) + timedelta(days=days)
            update_user_premium(callback.from_user.id, expiry_date)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π –ø–æ–∫—É–ø–∫–µ
        await callback.message.edit_text(
            user_locale["premium_purchase_success"],
            reply_markup=back_to_shop_keyboard(user_locale)
        )
        
    except Exception as e:
        logger.error(f"Error in premium purchase: {e}")
        await callback.answer(user_locale["error_purchase_failed"], show_alert=True)

def register_handlers_shop(dp: Dispatcher, locale):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –º–∞–≥–∞–∑–∏–Ω–∞"""
    dp.register_callback_query_handler(
        lambda c: process_shop(c, locale),
        lambda c: c.data == "shop"
    )
    dp.register_callback_query_handler(
        lambda c: process_shop_purchase(c, locale),
        lambda c: c.data.startswith("shop_buy:")
    )
    dp.register_callback_query_handler(
        lambda c: process_confirm_purchase(c, locale),
        lambda c: c.data.startswith("confirm_purchase:")
    )
    dp.register_callback_query_handler(
        lambda c: process_back_to_additional(c, locale),
        lambda c: c.data == "back_to_additional"
    )
    dp.register_callback_query_handler(
        lambda c: process_premium_purchase(c, locale),
        lambda c: c.data.startswith("premium_buy:")
    ) 