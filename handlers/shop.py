import logging
from aiogram import types
from aiogram.dispatcher import Dispatcher
from database.session import SessionLocal
from database.models import User
from keyboards.inline_keyboard import shop_keyboard, additional_keyboard
from utils.achievements import check_and_award_achievements, check_premium_achievement
from utils.helpers import get_user_language, get_user_coins, update_user_coins, is_user_premium, set_premium_status
from datetime import datetime, timedelta

logger = logging.getLogger(__name__)

# –¶–µ–Ω—ã —Ç–æ–≤–∞—Ä–æ–≤
PRICES = {
    "premium_forever": 100000,
    "premium_week": 1000,
    "premium_day": 400,
    "secret_video": 2000
}

# –°–µ–∫—Ä–µ—Ç–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ –≤–∏–¥–µ–æ
SECRET_VIDEO_LINK = "https://www.youtube.com/watch?v=dQw4w9WgXcQ"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É

async def process_shop(callback: types.CallbackQuery, locale):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –º–∞–≥–∞–∑–∏–Ω–∞"""
    locale = get_user_language(callback.from_user.id)
    await callback.answer()
    
    text = locale["shop_text"]
    await callback.message.edit_text(text, reply_markup=shop_keyboard(locale))

async def process_shop_purchase(callback: types.CallbackQuery, locale):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–∫—É–ø–æ–∫ –≤ –º–∞–≥–∞–∑–∏–Ω–µ"""
    locale = get_user_language(callback.from_user.id)
    await callback.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø –ø–æ–∫—É–ø–∫–∏ –∏–∑ callback_data
    item_type = callback.data.split(":")[1]
    price = PRICES.get(item_type)
    
    if not price:
        await callback.message.edit_text(
            locale["purchase_error"].format(error="Invalid item"),
            reply_markup=shop_keyboard(locale)
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_coins = get_user_coins(callback.from_user.id)
    if user_coins < price:
        await callback.message.edit_text(
            locale["not_enough_coins"].format(balance=user_coins, price=price),
            reply_markup=shop_keyboard(locale)
        )
        return
    
    try:
        # –°–ø–∏—Å—ã–≤–∞–µ–º –º–æ–Ω–µ—Ç—ã
        if not update_user_coins(callback.from_user.id, -price):
            await callback.message.edit_text(
                locale["purchase_error"].format(error="Failed to update coins"),
                reply_markup=shop_keyboard(locale)
            )
            return
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã –ø–æ–∫—É–ø–æ–∫
        if item_type == "premium_forever":
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–º–∏—É–º –Ω–∞–≤—Å–µ–≥–¥–∞
            set_premium_status(callback.from_user.id, None)  # None –æ–∑–Ω–∞—á–∞–µ—Ç "–Ω–∞–≤—Å–µ–≥–¥–∞"
            check_premium_achievement(callback.from_user.id)
        elif item_type == "premium_week":
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–º–∏—É–º –Ω–∞ –Ω–µ–¥–µ–ª—é
            expiry_date = datetime.now() + timedelta(days=7)
            set_premium_status(callback.from_user.id, expiry_date)
            check_premium_achievement(callback.from_user.id)
        elif item_type == "premium_day":
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–º–∏—É–º –Ω–∞ –¥–µ–Ω—å
            expiry_date = datetime.now() + timedelta(days=1)
            set_premium_status(callback.from_user.id, expiry_date)
            check_premium_achievement(callback.from_user.id)
        elif item_type == "secret_video":
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–µ–∫—Ä–µ—Ç–Ω–æ–µ –≤–∏–¥–µ–æ
            await callback.message.answer(
                f"üé¨ –°–µ–∫—Ä–µ—Ç–Ω—ã–π —Ä–æ–ª–∏–∫ –ë—É–±—Å–∞: {SECRET_VIDEO_LINK}",
                reply_markup=shop_keyboard(locale)
            )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π –ø–æ–∫—É–ø–∫–µ
        await callback.message.edit_text(
            locale["purchase_success"],
            reply_markup=shop_keyboard(locale)
        )
        
    except Exception as e:
        logger.error(f"Error processing purchase: {str(e)}")
        await callback.message.edit_text(
            locale["purchase_error"].format(error=str(e)),
            reply_markup=shop_keyboard(locale)
        )

async def process_back_to_additional(callback: types.CallbackQuery, locale):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –º–µ–Ω—é"""
    locale = get_user_language(callback.from_user.id)
    await callback.answer()
    await callback.message.edit_text(locale["additional_text"], reply_markup=additional_keyboard(locale))

def register_handlers_shop(dp: Dispatcher, locale):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –º–∞–≥–∞–∑–∏–Ω–∞"""
    dp.register_callback_query_handler(
        lambda c: process_shop(c, locale),
        lambda c: c.data == "shop"
    )
    dp.register_callback_query_handler(
        lambda c: process_shop_purchase(c, locale),
        lambda c: c.data.startswith("shop_buy:")
    )
    dp.register_callback_query_handler(
        lambda c: process_back_to_additional(c, locale),
        lambda c: c.data == "back_to_additional"
    ) 