import logging
from datetime import datetime, timezone
from aiogram import types
from aiogram.dispatcher import Dispatcher, FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from utils.helpers import save_announcement, get_user_language, is_user_premium, can_create_announcement, check_announcement_achievements
from keyboards.inline_keyboard import inline_main_menu_keyboard, action_announcement_keyboard, preview_announcement_keyboard, keyword_selection_keyboard, rules_keyboard
from states.announcement import AnnouncementState

logger = logging.getLogger(__name__)

class AnnouncementStates(StatesGroup):
    waiting_for_photo = State()
    waiting_for_description = State()
    waiting_for_keyword = State()
    waiting_for_action = State()
    waiting_in_preview = State()

async def cmd_create_announcement(message: types.Message, announcement_type: str, locale, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è"""
    # –ü–æ–ª—É—á–∞–µ–º –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_locale = get_user_language(message.from_user.id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞
    if not can_create_announcement(message.from_user.id, announcement_type):
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∏–º–µ–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π
        if is_user_premium(message.from_user.id):
            # –£ –ø—Ä–µ–º–∏—É–º-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –µ—Å—Ç—å 2 –æ–±—ä—è–≤–ª–µ–Ω–∏—è —ç—Ç–æ–≥–æ —Ç–∏–ø–∞
            await message.answer(
                user_locale["premium_announcement_limit_reached"],
                reply_markup=inline_main_menu_keyboard(user_locale)
            )
        else:
            # –£ –æ–±—ã—á–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –µ—Å—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ
            await message.answer(
                user_locale["no_premium_announcement_limit_reached"],
                reply_markup=inline_main_menu_keyboard(user_locale)
            )
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∏–ø –æ–±—ä—è–≤–ª–µ–Ω–∏—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.update_data(announcement_type=announcement_type)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª–∞
    await show_rules(message, locale, announcement_type)

async def show_rules(message: types.Message, locale, announcement_type: str):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–∞–≤–∏–ª–∞ –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏—è"""
    text = f"{locale['rules_title']}\n\n{locale['rules_text']}"
    await message.answer(text, reply_markup=rules_keyboard(locale, announcement_type))

async def process_rules_accept(callback: types.CallbackQuery, locale, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–∏–Ω—è—Ç–∏—è –ø—Ä–∞–≤–∏–ª"""
    await callback.answer()
    announcement_type = callback.data.split('_')[2]  # accept_rules_team –∏–ª–∏ accept_rules_club
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥, —á—Ç–æ –ø—Ä–∞–≤–∏–ª–∞ –ø—Ä–∏–Ω—è—Ç—ã
    await state.update_data(rules_accepted=True)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è
    await callback.message.edit_text(
        locale["ann_send_photo"],
        reply_markup=None
    )
    await AnnouncementState.waiting_for_photo.set()

async def process_photo(message: types.Message, locale, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ –º–µ–¥–∏–∞"""
    try:
        locale = get_user_language(message.from_user.id)
        logger.info(locale["log_ann_photo"].format(user=message.from_user.id))
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()
        if not data.get('rules_accepted', False):
            await show_rules(message, locale, data.get('announcement_type', 'team'))
            return
        
        if not data.get('announcement_type'):
            await state.finish()
            await message.answer(locale["ann_cancelled"], reply_markup=inline_main_menu_keyboard(locale))
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –º–µ–¥–∏–∞
        is_premium = is_user_premium(message.from_user.id)
        has_valid_media = (
            message.photo or 
            (message.video and is_premium) or 
            (message.animation and is_premium)
        )
        
        if not has_valid_media:
            keyboard = types.InlineKeyboardMarkup()
            keyboard.add(types.InlineKeyboardButton(locale["button_back"], callback_data="back_to_menu"))
            await message.answer(locale["ann_media_invalid"], reply_markup=keyboard)
            return
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –º–µ–¥–∏–∞ –∏ –ø–æ–ª—É—á–∞–µ–º file_id
        if message.photo:
            media_id = message.photo[-1].file_id
            media_type = "photo"
        elif message.video and is_premium:
            media_id = message.video.file_id
            media_type = "video"
        elif message.animation and is_premium:
            media_id = message.animation.file_id
            media_type = "animation"
        else:
            await message.answer(locale["ann_media_invalid"])
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–µ–¥–∏–∞
        await state.update_data(media_id=media_id, media_type=media_type)
        logger.info(locale["log_ann_media"].format(media_id=media_id, type=media_type))
        
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(types.InlineKeyboardButton(locale["button_back"], callback_data="back_to_menu"))
        await message.answer(locale["ann_send_desc"], reply_markup=keyboard)
        await AnnouncementState.waiting_for_description.set()
    except Exception as e:
        logger.error(f"Error in process_photo: {e}")
        await message.answer("An error occurred while processing media")

async def process_description(message: types.Message, locale, state: FSMContext):
    locale = get_user_language(message.from_user.id)
    description = message.text
    if len(description) < 20:
        await message.answer(locale["ann_desc_short"].format(count=len(description)))
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
    await state.update_data(description=description)
    data = await state.get_data()
    announcement_type = data.get("announcement_type")
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ —Ç–æ–ª—å–∫–æ –¥–ª—è –∫–æ–º–∞–Ω–¥
    if announcement_type == "team":
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–ª—é—á–µ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏
        await message.answer(locale["ann_select_keyword"], reply_markup=keyword_selection_keyboard(locale))
        await AnnouncementState.waiting_for_keyword.set()
    else:
        # –î–ª—è –∫–ª—É–±–æ–≤ —Å—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –¥–µ–π—Å—Ç–≤–∏—é —Å –ø—É–±–ª–∏–∫–∞—Ü–∏–µ–π
        await state.update_data(keyword=None)  # –Ø–≤–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º keyword –∫–∞–∫ None –¥–ª—è –∫–ª—É–±–æ–≤
        await message.answer(locale["ann_choose_action"], reply_markup=action_announcement_keyboard(locale))
        await AnnouncementState.waiting_for_action.set()

async def process_keyword(callback: types.CallbackQuery, locale, state: FSMContext):
    locale = get_user_language(callback.from_user.id)
    await callback.answer()
    
    keyword = None
    if callback.data != "skip_keyword":
        keyword = callback.data.replace("keyword_", "")
        # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        print(f"Setting keyword for announcement: callback_data={callback.data}, extracted keyword={keyword}")
        
    await state.update_data(keyword=keyword)
    await callback.message.edit_text(locale["ann_choose_action"], reply_markup=action_announcement_keyboard(locale))
    await AnnouncementState.waiting_for_action.set()

async def action_publish(callback: types.CallbackQuery, locale, state: FSMContext):
    locale = get_user_language(callback.from_user.id)
    await callback.answer()
    data = await state.get_data()
    announcement_type = data.get("announcement_type")
    media_id = data.get("media_id")
    media_type = data.get("media_type", "photo")
    description = data.get("description")
    keyword = data.get("keyword")
    logger.info(locale["log_ann_publish"].format(user=callback.from_user.id))
    save_announcement(
        user_id=callback.from_user.id,
        announcement_type=announcement_type,
        image_id=media_id,
        description=description,
        keyword=keyword,
        media_type=media_type
    )
    
    # –í—ã–¥–∞–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
    check_announcement_achievements(callback.from_user.id, announcement_type)
    
    await callback.message.edit_text(locale["ann_created_success"], reply_markup=inline_main_menu_keyboard(locale))
    await state.finish()

async def action_preview(callback: types.CallbackQuery, locale, state: FSMContext):
    locale = get_user_language(callback.from_user.id)
    await callback.answer()
    data = await state.get_data()
    media_id = data.get("media_id")
    media_type = data.get("media_type")
    description = data.get("description")
    keyword = data.get("keyword")
    preview_date = datetime.now(timezone.utc).strftime("%Y-%m-%d %H:%M")
    
    keyword_text = ""
    if keyword:
        keyword_display = locale.get(f"keyword_{keyword}", keyword)
        keyword_text = "\n" + locale["keyword_label"].format(keyword=keyword_display)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–º–∏—É–º-–º–µ—Ç–∫—É, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–µ–º–∏—É–º
    premium_text = ""
    if is_user_premium(callback.from_user.id):
        premium_text = " ü™ô PREMIUM"
    
    preview_text = f"<b>{description}</b>{keyword_text}{premium_text}\n\nüïí {preview_date}"
    await callback.message.delete()
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–¥–∏–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –µ–≥–æ —Ç–∏–ø–∞
    if media_type == "photo":
        await callback.message.bot.send_photo(
            chat_id=callback.from_user.id,
            photo=media_id,
            caption=locale["ann_preview"] + "\n\n" + preview_text,
            reply_markup=preview_announcement_keyboard(locale)
        )
    elif media_type == "video":
        await callback.message.bot.send_video(
            chat_id=callback.from_user.id,
            video=media_id,
            caption=locale["ann_preview"] + "\n\n" + preview_text,
            reply_markup=preview_announcement_keyboard(locale)
        )
    else:  # animation (GIF)
        await callback.message.bot.send_animation(
            chat_id=callback.from_user.id,
            animation=media_id,
            caption=locale["ann_preview"] + "\n\n" + preview_text,
            reply_markup=preview_announcement_keyboard(locale)
        )
    
    await AnnouncementState.waiting_in_preview.set()

async def preview_back(callback: types.CallbackQuery, locale, state: FSMContext):
    locale = get_user_language(callback.from_user.id)
    await callback.answer()
    await callback.message.delete()
    await callback.message.bot.send_message(
        chat_id=callback.from_user.id,
        text=locale["ann_choose_action"],
        reply_markup=action_announcement_keyboard(locale)
    )
    await AnnouncementState.waiting_for_action.set()

async def action_cancel(callback: types.CallbackQuery, locale, state: FSMContext):
    locale = get_user_language(callback.from_user.id)
    await callback.answer(locale["ann_cancel_popup"])
    await state.finish()
    await callback.message.edit_text(locale["ann_cancelled"], reply_markup=inline_main_menu_keyboard(locale))

async def show_preview(message: types.Message, locale, state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –æ–±—ä—è–≤–ª–µ–Ω–∏—è"""
    data = await state.get_data()
    media_id = data.get("media_id")
    media_type = data.get("media_type")
    description = data.get("description")
    announcement_type = data.get("announcement_type")
    keyword = data.get("keyword") if announcement_type == "team" else None
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ø—Ä–µ–≤—å—é
    preview_text = ""
    if announcement_type == "team" and keyword:
        preview_text += f"{locale['keyword_label'].format(keyword=locale.get(f'keyword_{keyword}', keyword))}\n"
    preview_text += description
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–¥–∏–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –µ–≥–æ —Ç–∏–ø–∞
    if media_type == "photo":
        await message.bot.send_photo(
            chat_id=message.chat.id,
            photo=media_id,
            caption=preview_text,
            reply_markup=preview_announcement_keyboard(locale)
        )
    elif media_type == "video":
        await message.bot.send_video(
            chat_id=message.chat.id,
            video=media_id,
            caption=preview_text,
            reply_markup=preview_announcement_keyboard(locale)
        )
    else:  # animation (GIF)
        await message.bot.send_animation(
            chat_id=message.chat.id,
            animation=media_id,
            caption=preview_text,
            reply_markup=preview_announcement_keyboard(locale)
        )

async def back_to_menu(callback: types.CallbackQuery, locale, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" - –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await callback.answer()
    await state.finish()
    await callback.message.edit_text(locale["menu_text"], reply_markup=inline_main_menu_keyboard(locale))

def register_announcement_handlers(dp: Dispatcher, locale):
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
    dp.register_callback_query_handler(
        lambda call, state: back_to_menu(call, locale, state),
        lambda c: c.data == "back_to_menu",
        state="*"
    )
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏–π
    dp.register_callback_query_handler(
        lambda c: cmd_create_announcement(c.message, "team", locale, dp.current_state()),
        lambda c: c.data == "create_new_team"
    )
    dp.register_callback_query_handler(
        lambda c: cmd_create_announcement(c.message, "club", locale, dp.current_state()),
        lambda c: c.data == "create_new_club"
    )
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–∞–≤–∏–ª
    dp.register_callback_query_handler(
        lambda c: process_rules_accept(c, locale, dp.current_state()),
        lambda c: c.data.startswith("accept_rules_")
    )
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–µ–¥–∏–∞
    dp.register_message_handler(
        lambda message, state: process_photo(message, locale, state),
        content_types=[
            types.ContentType.PHOTO,
            types.ContentType.VIDEO,
            types.ContentType.ANIMATION
        ],
        state=AnnouncementState.waiting_for_photo
    )
    
    # –û—Å—Ç–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    dp.register_message_handler(
        lambda message, state: process_description(message, locale, state),
        state=AnnouncementState.waiting_for_description
    )
    dp.register_callback_query_handler(
        lambda call, state: process_keyword(call, locale, state),
        lambda c: c.data.startswith("keyword_") or c.data == "skip_keyword",
        state=AnnouncementState.waiting_for_keyword
    )
    dp.register_callback_query_handler(
        lambda call, state: action_publish(call, locale, state),
        lambda c: c.data == "publish_announcement",
        state=AnnouncementState.waiting_for_action
    )
    dp.register_callback_query_handler(
        lambda call, state: action_preview(call, locale, state),
        lambda c: c.data == "preview_announcement",
        state=AnnouncementState.waiting_for_action
    )
    dp.register_callback_query_handler(
        lambda call, state: action_cancel(call, locale, state),
        lambda c: c.data == "cancel_announcement",
        state=AnnouncementState.waiting_for_action
    )
    dp.register_callback_query_handler(
        lambda call, state: preview_back(call, locale, state),
        lambda c: c.data == "preview_back",
        state=AnnouncementState.waiting_in_preview
    )

