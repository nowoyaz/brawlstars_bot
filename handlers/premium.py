from aiogram import types
from aiogram.dispatcher import Dispatcher, FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from utils.helpers import is_user_premium
from database.crud import get_premium_prices, get_user, update_user_premium, use_promo_code
from config import ADMIN_ID, MANAGER_LINK
from utils.helpers import get_user_language, record_section_visit, check_premium_achievement
from keyboards.inline_keyboard import premium_keyboard, premium_prices_keyboard
from database.session import SessionLocal
import datetime
from database.models import User
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher import FSMContext
from utils.helpers import use_promo_code
import logging

logger = logging.getLogger(__name__)

class PremiumStates(StatesGroup):
    waiting_for_price = State()

class PromoState(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–æ–º–æ–∫–æ–¥–∞–º–∏"""
    waiting_for_promo_code = State()

async def cmd_premium(message: types.Message, locale):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /premium - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–µ–º–∏—É–º-—Å—Ç–∞—Ç—É—Å–µ"""
    user_locale = get_user_language(message.from_user.id)
    user = get_user(message.from_user.id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–µ–º–∏—É–º-—Å—Ç–∞—Ç—É—Å
    is_premium = user and user.premium_end_date and user.premium_end_date > datetime.datetime.now()
    
    if is_premium:
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø—Ä–µ–º–∏—É–º–∞
        premium_end = user.premium_end_date.strftime("%d.%m.%Y")
        await message.answer(
            user_locale.get("premium_active_text", "").format(date=premium_end),
            reply_markup=premium_keyboard(user_locale, is_premium=True)
        )
    else:
        await message.answer(
            user_locale.get("premium_text", ""),
            reply_markup=premium_keyboard(user_locale)
        )

async def cmd_premium_prices(callback: types.CallbackQuery, locale):
    locale = get_user_language(callback.from_user.id)
    await callback.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Ü–µ–Ω—ã
    prices = get_premium_prices()
    
    # –°–ª–æ–≤–∞—Ä—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–Ω–µ–π –∏ —Ç–∏–ø–∞ –ø–æ–¥–ø–∏—Å–∫–∏
    duration_to_type = {
        30: "month",          # 30 –¥–Ω–µ–π - –º–µ—Å—è—Ü
        180: "half_year",     # 180 –¥–Ω–µ–π - –ø–æ–ª–≥–æ–¥–∞
        365: "year",          # 365 –¥–Ω–µ–π - –≥–æ–¥
        9999: "forever"       # 9999 –¥–Ω–µ–π - –Ω–∞–≤—Å–µ–≥–¥–∞
    }
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
    prices_dict = {}
    for price in prices:
        type_key = duration_to_type.get(price.duration_days, str(price.duration_days))
        prices_dict[type_key] = price.price
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å —Ü–µ–Ω–∞–º–∏
    text = locale["premium_prices_text"].format(
        month=prices_dict.get("month", "500"),
        half_year=prices_dict.get("half_year", "2500"),
        year=prices_dict.get("year", "4500"),
        forever=prices_dict.get("forever", "9900")
    )
    
    await callback.message.edit_text(text, reply_markup=premium_prices_keyboard(locale))

async def process_premium_menu(callback: types.CallbackQuery, locale):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –º–µ–Ω—é –ø—Ä–µ–º–∏—É–º"""
    user_locale = get_user_language(callback.from_user.id)
    user = get_user(callback.from_user.id)
    
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –ø–æ—Å–µ—â–µ–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–∞
    record_section_visit(callback.from_user.id, "premium")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–µ–º–∏—É–º-—Å—Ç–∞—Ç—É—Å
    is_premium = user and user.premium_end_date and user.premium_end_date > datetime.datetime.now()
    
    await callback.answer()
    
    if is_premium:
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø—Ä–µ–º–∏—É–º–∞
        premium_end = user.premium_end_date.strftime("%d.%m.%Y")
        await callback.message.edit_text(
            user_locale.get("premium_active_text", "").format(date=premium_end),
            reply_markup=premium_keyboard(user_locale, is_premium=True)
        )
    else:
        await callback.message.edit_text(
            user_locale.get("premium_text", ""),
            reply_markup=premium_keyboard(user_locale)
        )

async def process_activate_promo(callback: types.CallbackQuery, state: FSMContext, locale):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞"""
    user_locale = get_user_language(callback.from_user.id)
    
    await callback.answer()
    
    await callback.message.edit_text(
        user_locale.get("promo_code_input", "üéüÔ∏è –í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–µ–º–∏—É–º:"),
        reply_markup=types.InlineKeyboardMarkup().add(
            types.InlineKeyboardButton(text=user_locale.get("promo_code_cancel", "üîô –û—Ç–º–µ–Ω–∞"), callback_data="cancel_promo")
        )
    )
    
    await PromoState.waiting_for_promo_code.set()

async def process_promo_code(message: types.Message, state: FSMContext, locale):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞"""
    user_locale = get_user_language(message.from_user.id)
    
    # –ü–æ–ª—É—á–∞–µ–º –≤–≤–µ–¥–µ–Ω–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥ –∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –µ–≥–æ –≤ –≤–µ—Ä—Ö–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä
    promo_code = message.text.strip().upper()
    
    # –ü—ã—Ç–∞–µ–º—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥
    result = use_promo_code(promo_code, message.from_user.id)
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.finish()
    
    kb = types.InlineKeyboardMarkup().add(
        types.InlineKeyboardButton(text=user_locale.get("back_to_menu", "üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é"), callback_data="back_to_main")
    )
    
    if result and result.get('success'):
        # –ü—Ä–æ–º–æ–∫–æ–¥ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω
        days = result.get('duration_days', 0)
        end_date = result.get('end_date').strftime("%d.%m.%Y") if result.get('end_date') else "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        
        await message.answer(
            user_locale.get("promo_code_success", "").format(days=days, date=end_date),
            reply_markup=kb
        )
    else:
        # –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞
        error_code = result.get('error_code') if result else 'unknown'
        
        if error_code == 'not_found':
            error_message = user_locale.get("promo_code_not_found", f"‚ùå –ü—Ä–æ–º–æ–∫–æ–¥ {promo_code} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        elif error_code == 'expired':
            error_message = user_locale.get("promo_code_expired", f"‚ùå –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞ {promo_code} –∏—Å—Ç–µ–∫.")
        elif error_code == 'used':
            error_message = user_locale.get("promo_code_used", f"‚ùå –í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –ø—Ä–æ–º–æ–∫–æ–¥ {promo_code}.")
        elif error_code == 'limit_reached':
            error_message = user_locale.get("promo_code_limit", f"‚ùå –õ–∏–º–∏—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞ {promo_code} –∏—Å—á–µ—Ä–ø–∞–Ω.")
        elif error_code == 'inactive':
            error_message = user_locale.get("promo_code_inactive", f"‚ùå –ü—Ä–æ–º–æ–∫–æ–¥ {promo_code} –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω.")
        else:
            error_message = user_locale.get("promo_code_error", f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞ {promo_code}.")
        
        await message.answer(
            error_message,
            reply_markup=kb
        )

async def process_cancel_promo(callback: types.CallbackQuery, state: FSMContext, locale):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–æ–¥–∞ –ø—Ä–æ–º–æ–∫–æ–¥–∞"""
    user_locale = get_user_language(callback.from_user.id)
    
    await state.finish()
    await callback.answer()
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é –ø—Ä–µ–º–∏—É–º
    await process_premium_menu(callback, locale)

def register_handlers_premium(dp: Dispatcher, locale):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –ø—Ä–µ–º–∏—É–º"""
    dp.register_message_handler(lambda message: cmd_premium(message, locale), commands=["premium"])
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞
    dp.register_callback_query_handler(
        lambda c: process_premium_menu(c, locale),
        lambda c: c.data == "premium"
    )
    dp.register_callback_query_handler(
        lambda c: cmd_premium_prices(c, locale),
        lambda c: c.data == "premium_prices_info"
    )
    dp.register_callback_query_handler(
        lambda c, state: process_activate_promo(c, state, locale),
        lambda c: c.data == "activate_promo"
    )
    dp.register_message_handler(
        lambda message, state: process_promo_code(message, state, locale),
        state=PromoState.waiting_for_promo_code
    )
    dp.register_callback_query_handler(
        lambda c, state: process_cancel_promo(c, state, locale),
        lambda c: c.data == "cancel_promo",
        state=PromoState.waiting_for_promo_code
    )
