from aiogram import types
from aiogram.dispatcher import Dispatcher
from aiogram.dispatcher import FSMContext
from utils.helpers import (
    get_next_announcement,
    get_user_announcement,
    get_announcements_count,
    add_favorite,
    report_announcement,
    get_filtered_announcement,
    get_announcements_list,
    get_announcement_by_id,
    is_user_premium
)

from keyboards.inline_keyboard import (
    search_team_menu_keyboard,
    search_options_keyboard,
    search_club_menu_keyboard,
    search_options_club_keyboard,
    confirmation_keyboard,
    announcement_keyboard,
    inline_main_menu_keyboard,
    announcement_view_keyboard,
    report_reason_keyboard,
    search_filters_keyboard,
    report_admin_keyboard,
    report_confirmation_keyboard
)
from config import ADMIN_ID
from utils.helpers import get_user_language

# ----- –ú–µ–Ω—é –ø–æ–∏—Å–∫–∞ -----

async def process_search_team_menu(callback: types.CallbackQuery, locale):
    locale = get_user_language(callback.from_user.id)
    await callback.answer()
    text = locale["search_team_menu_text"]
    await callback.message.edit_text(text, reply_markup=search_team_menu_keyboard(locale))

async def process_search_club_menu(callback: types.CallbackQuery, locale):
    locale = get_user_language(callback.from_user.id)
    await callback.answer()
    text = locale["search_club_menu_text"]
    await callback.message.edit_text(text, reply_markup=search_club_menu_keyboard(locale))

# ----- "–ú–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ" -----

async def process_my_announcement(callback: types.CallbackQuery, locale, announcement_type: str):
    locale = get_user_language(callback.from_user.id)
    await callback.answer()
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø—Ä–µ–º–∏—É–º, –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –≤ –¥—Ä—É–≥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    from utils.helpers import is_user_premium
    if not is_user_premium(callback.from_user.id):
        opposite_type = "club" if announcement_type == "team" else "team"
        opposite = get_user_announcement(callback.from_user.id, opposite_type)
        if opposite:
            await callback.message.edit_text(f"–í—ã —É–∂–µ —Å–æ–∑–¥–∞–ª–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{opposite_type}'.", reply_markup=inline_main_menu_keyboard(locale))
            return
    announcement = get_user_announcement(callback.from_user.id, announcement_type)
    if announcement:
        premium_label = " üíé PREMIUM" if announcement.get("is_premium") else ""
        text = f"<b>–í–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ:</b>\n{announcement['description']}{premium_label}\n\nüïí {announcement['created_at']}"
        media = types.InputMediaPhoto(announcement["image_id"], caption=text)
        await callback.message.edit_media(media, reply_markup=announcement_view_keyboard(locale))
    else:
        kb = types.InlineKeyboardMarkup(row_width=1)
        kb.add(types.InlineKeyboardButton(text=locale["button_back"], callback_data="back_to_search_menu"))
        kb.add(types.InlineKeyboardButton(text=locale["button_create_new"], callback_data=f"create_new_{announcement_type}"))
        await callback.message.edit_text(locale["no_announcement_create_prompt"], reply_markup=kb)

# ----- –û–±—ã—á–Ω—ã–π –ø–æ–∏—Å–∫ —á—É–∂–æ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è -----

async def process_search_team_options(callback: types.CallbackQuery, locale):
    locale = get_user_language(callback.from_user.id)
    await callback.answer()
    text = locale["search_options_text"]
    await callback.message.edit_text(text, reply_markup=search_options_keyboard(locale))

async def process_search_club_options(callback: types.CallbackQuery, locale):
    locale = get_user_language(callback.from_user.id)
    await callback.answer()
    text = locale["search_options_text"]
    await callback.message.edit_text(text, reply_markup=search_options_club_keyboard(locale))

async def process_normal_search_team_confirmation(callback: types.CallbackQuery, locale):
    locale = get_user_language(callback.from_user.id)
    await callback.answer()
    text = locale["normal_search_advice_text"]
    await callback.message.edit_text(text, reply_markup=confirmation_keyboard(locale, suffix="team"))

async def process_next_team(callback: types.CallbackQuery, locale, state: FSMContext):
    locale = get_user_language(callback.from_user.id)
    await callback.answer()
    announcement_list = get_announcements_list("team", callback.from_user.id)
    if not announcement_list:
        await callback.message.edit_text(locale["no_announcements"], reply_markup=inline_main_menu_keyboard(locale))
        return
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –∏–Ω–¥–µ–∫—Å –∏–∑ FSM (–µ—Å–ª–∏ –Ω–µ—Ç, –Ω–∞—á–∏–Ω–∞–µ–º —Å 0)
    data = await state.get_data()
    announcement_index = data.get("announcement_index", 0)
    count = len(announcement_list)
    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–¥–µ–∫—Å —Ü–∏–∫–ª–∏—á–Ω–æ
    next_index = (announcement_index + 1) % count
    await state.update_data(announcement_index=next_index)
    current_id = announcement_list[announcement_index]
    announcement = get_announcement_by_id(current_id)
    if announcement:
        text = f"{announcement['description']}\n\nüïí {announcement['created_at']}"
        has_next = count > 1
        try:
            await callback.message.delete()
        except Exception:
            pass
        await callback.message.bot.send_photo(
            callback.from_user.id,
            photo=announcement["image_id"],
            caption=text,
            reply_markup=announcement_keyboard(locale, announcement["id"], announcement["user_id"], has_next, "team")
        )
    else:
        await callback.message.edit_text("–û–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", reply_markup=inline_main_menu_keyboard(locale))

async def process_normal_search_team(callback: types.CallbackQuery, locale):
    locale = get_user_language(callback.from_user.id)
    await callback.answer()
    announcement = get_next_announcement("team", callback.from_user.id)
    if announcement:
        count = get_announcements_count("team", callback.from_user.id)
        has_next = count > 1
        premium_label = " üíé PREMIUM" if is_user_premium(announcement['user_id']) else ""
        text = f"{announcement['description']}{premium_label}\n\nüïí {announcement['created_at']}\n{premium_label}"
        try:
            await callback.message.delete()
        except Exception:
            pass
        await callback.message.bot.send_photo(
            callback.from_user.id,
            photo=announcement["image_id"],
            caption=text,
            reply_markup=announcement_keyboard(locale, announcement["id"], announcement["user_id"], has_next, "team")
        )
    else:
        await callback.message.edit_text(locale["no_announcements"], reply_markup=inline_main_menu_keyboard(locale))

async def process_normal_search_club_confirmation(callback: types.CallbackQuery, locale):
    locale = get_user_language(callback.from_user.id)
    await callback.answer()
    text = locale["normal_search_advice_text"]
    await callback.message.edit_text(text, reply_markup=confirmation_keyboard(locale, suffix="club"))

async def process_next_team(callback: types.CallbackQuery, locale, state: FSMContext):
    locale = get_user_language(callback.from_user.id)
    await callback.answer()
    announcement_list = get_announcements_list("team", callback.from_user.id)
    if not announcement_list:
        await callback.message.edit_text(locale["no_announcements"], reply_markup=inline_main_menu_keyboard(locale))
        return
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –∏–Ω–¥–µ–∫—Å –∏–∑ FSM (–µ—Å–ª–∏ –Ω–µ—Ç, –Ω–∞—á–∏–Ω–∞–µ–º —Å 0)
    data = await state.get_data()
    announcement_index = data.get("announcement_index", 0)
    count = len(announcement_list)
    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–¥–µ–∫—Å —Ü–∏–∫–ª–∏—á–Ω–æ
    next_index = (announcement_index + 1) % count
    await state.update_data(announcement_index=next_index)
    current_id = announcement_list[announcement_index]
    announcement = get_announcement_by_id(current_id)
    if announcement:
        text = f"{announcement['description']}\n\nüïí {announcement['created_at']}"
        has_next = count > 1
        try:
            await callback.message.delete()
        except Exception:
            pass
        await callback.message.bot.send_photo(
            callback.from_user.id,
            photo=announcement["image_id"],
            caption=text,
            reply_markup=announcement_keyboard(locale, announcement["id"], announcement["user_id"], has_next, "team")
        )
    else:
        await callback.message.edit_text("–û–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", reply_markup=inline_main_menu_keyboard(locale))

async def process_next_club(callback: types.CallbackQuery, locale, state: FSMContext):
    locale = get_user_language(callback.from_user.id)
    await callback.answer()
    announcement_list = get_announcements_list("club", callback.from_user.id)
    if not announcement_list:
        await callback.message.edit_text(locale["no_announcements"], reply_markup=inline_main_menu_keyboard(locale))
        return
    data = await state.get_data()
    announcement_index = data.get("announcement_index", 0)
    count = len(announcement_list)
    next_index = (announcement_index + 1) % count
    await state.update_data(announcement_index=next_index)
    current_id = announcement_list[announcement_index]
    announcement = get_announcement_by_id(current_id)
    if announcement:
        text = f"{announcement['description']}\n\nüïí {announcement['created_at']}"
        has_next = count > 1
        try:
            await callback.message.delete()
        except Exception:
            pass
        await callback.message.bot.send_photo(
            callback.from_user.id,
            photo=announcement["image_id"],
            caption=text,
            reply_markup=announcement_keyboard(locale, announcement["id"], announcement["user_id"], has_next, "club")
        )
    else:
        await callback.message.edit_text("–û–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", reply_markup=inline_main_menu_keyboard(locale))

async def process_normal_search_club(callback: types.CallbackQuery, locale):
    locale = get_user_language(callback.from_user.id)
    await callback.answer()
    announcement = get_next_announcement("club", callback.from_user.id)
    if announcement:
        count = get_announcements_count("club", callback.from_user.id)
        has_next = count > 1
        premium_label = " üíé PREMIUM" if announcement.get("is_premium") else ""
        text = f"{announcement['description']}{premium_label}\n\nüïí {announcement['created_at']}\n{premium_label}"

        try:
            await callback.message.delete()
        except Exception:
            pass
        await callback.message.bot.send_photo(
            callback.from_user.id,
            photo=announcement["image_id"],
            caption=text,
            reply_markup=announcement_keyboard(locale, announcement["id"], announcement["user_id"], has_next, "club")
        )
    else:
        await callback.message.edit_text(locale["no_announcements"], reply_markup=inline_main_menu_keyboard(locale))
# ----- –ò–∑–±—Ä–∞–Ω–Ω–æ–µ -----

async def process_favorite(callback: types.CallbackQuery, locale, announcement_type: str):
    locale = get_user_language(callback.from_user.id)
    await callback.answer(locale["button_favorite"] + " ‚úÖ")
    data = callback.data.split(":")
    if len(data) >= 3:
        announcement_id = int(data[1])
        add_favorite(callback.from_user.id, announcement_id)
    if announcement_type == "team":
        await process_normal_search_team(callback, locale)
    else:
        await process_normal_search_club(callback, locale)

# ----- –†–µ–ø–æ—Ä—Ç -----

async def process_report_selection(callback: types.CallbackQuery, locale):
    locale = get_user_language(callback.from_user.id)
    await callback.answer()
    data = callback.data.split(":")
    if len(data) >= 4:
        announcement_id, reason, announcement_type = int(data[1]), data[2], data[3]
        confirm_text = "ü§î –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è –Ω–∞ —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è? –ü—Ä–∏ –ª–æ–∂–Ω—ã—Ö —Ä–µ–ø–æ—Ä—Ç–∞—Ö –≤—ã –º–æ–∂–µ—Ç–µ –±—ã—Ç—å –Ω–∞–∫–∞–∑–∞–Ω—ã. ‚öñÔ∏è"
        # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é, —É–¥–∞–ª—è–µ–º –µ–≥–æ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        try:
            if callback.message.photo:
                await callback.message.delete()
                await callback.message.bot.send_message(
                    callback.from_user.id,
                    confirm_text,
                    reply_markup=report_confirmation_keyboard(announcement_id, announcement_type, reason)
                )
            else:
                await callback.message.edit_text(
                    confirm_text,
                    reply_markup=report_confirmation_keyboard(announcement_id, announcement_type, reason)
                )
        except Exception:
            # –ù–∞ —Å–ª—É—á–∞–π –æ—à–∏–±–æ–∫ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await callback.message.bot.send_message(
                callback.from_user.id,
                confirm_text,
                reply_markup=report_confirmation_keyboard(announcement_id, announcement_type, reason)
            )

async def confirm_report(callback: types.CallbackQuery, locale):
    locale = get_user_language(callback.from_user.id)
    await callback.answer()
    # –û–∂–∏–¥–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç: "confirm_report:<announcement_id>:<reason>:<announcement_type>:yes"
    data = callback.data.split(":")
    if len(data) >= 5:
        announcement_id, reason, announcement_type, confirmation = int(data[1]), data[2], data[3], data[4]
        if confirmation == "yes":
            report_announcement(callback.from_user.id, announcement_id, reason)
            from utils.helpers import get_announcement_by_id
            announcement = get_announcement_by_id(announcement_id)
            if announcement:
                text = f"{announcement['description']}\n\nüïí {announcement['created_at']}\n–ü—Ä–∏—á–∏–Ω–∞: {reason}"
                await callback.bot.send_photo(
                    ADMIN_ID,
                    photo=announcement["image_id"],
                    caption=text,
                    reply_markup=report_admin_keyboard(locale, announcement["user_id"], callback.from_user.id)
                )
        try:
            await callback.message.delete()
        except Exception:
            pass
        # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –æ–±—ä—è–≤–ª–µ–Ω–∏—é, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å:
        if announcement_type == "team":
            next_ann = get_next_announcement("team", callback.from_user.id)
            if next_ann:
                await process_normal_search_team(callback, locale)
            else:
                await callback.message.bot.send_message(callback.from_user.id, "–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç", reply_markup=inline_main_menu_keyboard(locale))
        else:
            next_ann = get_next_announcement("club", callback.from_user.id)
            if next_ann:
                await process_normal_search_club(callback, locale)
            else:
                await callback.message.bot.send_message(callback.from_user.id, "–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç", reply_markup=inline_main_menu_keyboard(locale))

async def cancel_report(callback: types.CallbackQuery, locale):
    locale = get_user_language(callback.from_user.id)
    await callback.answer("–û—Ç–º–µ–Ω–µ–Ω–æ")
    data = callback.data.split(":")
    if len(data) >= 3:
        announcement_id = int(data[1])
        announcement_type = data[2]
        announcement = get_announcement_by_id(announcement_id)
        if announcement:
            count = get_announcements_count(announcement_type, callback.from_user.id)
            has_next = count > 1
            text = f"{announcement['description']}\n\nüïí {announcement['created_at']}"
            try:
                await callback.message.delete()
            except Exception:
                pass
            await callback.message.bot.send_photo(
                callback.from_user.id,
                photo=announcement["image_id"],
                caption=text,
                reply_markup=announcement_keyboard(locale, announcement["id"], announcement["user_id"], has_next, announcement_type)
            )
        else:
            await callback.message.edit_text("–û–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", reply_markup=inline_main_menu_keyboard(locale))


async def process_report(callback: types.CallbackQuery, locale, announcement_type: str):
    locale = get_user_language(callback.from_user.id)
    await callback.answer()
    data = callback.data.split(":")
    if len(data) >= 3:
        announcement_id = int(data[1])
        # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ñ–æ—Ç–æ, –ø—ã—Ç–∞–µ–º—Å—è –≤—ã–∑–≤–∞—Ç—å edit_caption, –∏–Ω–∞—á–µ edit_text
        try:
            await callback.message.edit_caption(locale["report_text"], reply_markup=report_reason_keyboard(locale, announcement_id, announcement_type))
        except Exception:
            await callback.message.edit_text(locale["report_text"], reply_markup=report_reason_keyboard(locale, announcement_id, announcement_type))

async def process_report_reason(callback: types.CallbackQuery, locale):
    locale = get_user_language(callback.from_user.id)
    await callback.answer()
    data = callback.data.split(":")
    if len(data) >= 4:
        announcement_id, reason, announcement_type = int(data[1]), data[2], data[3]
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–ø–æ—Ä—Ç —Å —É–∫–∞–∑–∞–Ω–Ω–æ–π –ø—Ä–∏—á–∏–Ω–æ–π
        report_announcement(callback.from_user.id, announcement_id, reason)
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ä–µ–ø–æ—Ä—Ç–æ–≤–∞–Ω–Ω–æ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
        from utils.helpers import get_announcement_by_id
        announcement = get_announcement_by_id(announcement_id)
        if announcement:
            text = f"{announcement['description']}\n\nüïí {announcement['created_at']}"
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω—É —Ñ–æ—Ç–æ —Å –∞–Ω–∫–µ—Ç–æ–π –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏/–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏—è.
            # –ü–µ—Ä–µ–¥–∞—ë–º –≤ report_admin_keyboard locale, announcement["user_id"] –∏ callback.from_user.id
            await callback.bot.send_photo(
                ADMIN_ID,
                photo=announcement["image_id"],
                caption=text,
                reply_markup=report_admin_keyboard(locale, announcement["user_id"], callback.from_user.id)
            )
        try:
            await callback.message.delete()
        except Exception:
            pass
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –æ–±—ä—è–≤–ª–µ–Ω–∏—é, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
        if announcement_type == "team":
            next_ann = get_next_announcement("team", callback.from_user.id)
            if next_ann:
                await process_normal_search_team(callback, locale)
            else:
                await callback.message.bot.send_message(callback.from_user.id, "–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç", reply_markup=inline_main_menu_keyboard(locale))
        else:
            next_ann = get_next_announcement("club", callback.from_user.id)
            if next_ann:
                await process_normal_search_club(callback, locale)
            else:
                await callback.message.bot.send_message(callback.from_user.id, "–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç", reply_markup=inline_main_menu_keyboard(locale))

# ----- –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è -----

async def process_filtered_search(callback: types.CallbackQuery, locale, announcement_type: str):
    locale = get_user_language(callback.from_user.id)
    await callback.answer()
    # –û–∂–∏–¥–∞–µ—Ç—Å—è, —á—Ç–æ callback.data –∏–º–µ–µ—Ç —Ñ–æ—Ä–º–∞—Ç "filtered_search_<announcement_type>_<order>"
    data = callback.data.split("_")
    if len(data) >= 3:
        order = data[2]  # –ù–∞–ø—Ä–∏–º–µ—Ä, "new", "old" –∏–ª–∏ "premium"
        announcement_list = get_filtered_announcement(announcement_type, callback.from_user.id, order)
    else:
        announcement_list = []
    if announcement_list:
        from utils.helpers import get_announcement_by_id
        announcement = get_announcement_by_id(announcement_list[0])
        if announcement:
            premium_label = " üíé PREMIUM" if announcement.get("is_premium") else ""
            text = f"{announcement['description']}\n\nüïí {announcement['created_at']}\n{premium_label}"
            # –ï—Å–ª–∏ —Å–ø–∏—Å–æ–∫ —Å–æ–¥–µ—Ä–∂–∏—Ç –±–æ–ª—å—à–µ –æ–¥–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞, –∫–Ω–æ–ø–∫–∞ "–î–∞–ª—å—à–µ" –ø–æ—è–≤–∏—Ç—Å—è
            has_next = len(announcement_list) > 1
            try:
                await callback.message.delete()
            except Exception:
                pass
            await callback.message.bot.send_photo(
                callback.from_user.id,
                photo=announcement["image_id"],
                caption=text,
                reply_markup=announcement_keyboard(locale, announcement["id"], announcement["user_id"], has_next, announcement_type)
            )
        else:
            await callback.message.edit_text("–û–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", reply_markup=inline_main_menu_keyboard(locale))
    else:
        await callback.message.edit_text("–û–±—ä—è–≤–ª–µ–Ω–∏–π –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É —Ñ–∏–ª—å—Ç—Ä—É –Ω–µ—Ç üòï", reply_markup=inline_main_menu_keyboard(locale))


async def show_filters_team(callback: types.CallbackQuery, locale):
    locale = get_user_language(callback.from_user.id)
    await callback.answer()
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª—å—Ç—Ä –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥—ã:", reply_markup=search_filters_keyboard(locale, "team"))

async def show_filters_club(callback: types.CallbackQuery, locale):
    locale = get_user_language(callback.from_user.id)
    await callback.answer()
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –¥–ª—è –∫–ª—É–±–∞
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª—å—Ç—Ä –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–ª—É–±–∞:", reply_markup=search_filters_keyboard(locale, "club"))







# ----- –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥" -----

async def process_back_to_search_menu(callback: types.CallbackQuery, locale):
    locale = get_user_language(callback.from_user.id)
    await callback.answer()
    await callback.message.delete()
    await callback.message.bot.send_message(callback.from_user.id, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=inline_main_menu_keyboard(locale))


async def process_back_report(callback: types.CallbackQuery, locale):
    locale = get_user_language(callback.from_user.id)
    await callback.answer()
    data = callback.data.split(":")
    if len(data) >= 3:
        announcement_id = int(data[1])
        announcement_type = data[2]
        from utils.helpers import get_announcement_by_id
        announcement = get_announcement_by_id(announcement_id)
        if announcement:
            count = get_announcements_count(announcement_type, callback.from_user.id)
            has_next = count > 1
            text = f"{announcement['description']}\n\nüïí {announcement['created_at']}"
            await callback.message.delete()
            await callback.message.bot.send_photo(
                callback.from_user.id,
                photo=announcement["image_id"],
                caption=text,
                reply_markup=announcement_keyboard(locale, announcement["id"], announcement["user_id"], has_next, announcement_type)
            )
        else:
            await callback.message.edit_text("–û–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", reply_markup=inline_main_menu_keyboard(locale))
# ----- –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ -----

def register_handlers_search(dp: Dispatcher, locale):
    # –ü–æ–∏—Å–∫ –∫–æ–º–∞–Ω–¥—ã
    dp.register_callback_query_handler(lambda call: process_search_team_menu(call, locale), lambda c: c.data == "search_team_menu")
    dp.register_callback_query_handler(lambda call: process_search_team_options(call, locale), lambda c: c.data == "search_team_search")
    dp.register_callback_query_handler(lambda call: process_normal_search_team_confirmation(call, locale), lambda c: c.data == "normal_search_team")
    dp.register_callback_query_handler(lambda call: process_normal_search_team(call, locale), lambda c: c.data == "confirm_normal_search_team")
    
    # –ü–æ–∏—Å–∫ –∫–ª—É–±–∞
    dp.register_callback_query_handler(lambda call: process_search_club_menu(call, locale), lambda c: c.data == "search_club_menu")
    dp.register_callback_query_handler(lambda call: process_search_club_options(call, locale), lambda c: c.data == "search_club_search")
    dp.register_callback_query_handler(lambda call: process_normal_search_club_confirmation(call, locale), lambda c: c.data == "normal_search_club")
    dp.register_callback_query_handler(lambda call: process_normal_search_club(call, locale), lambda c: c.data == "confirm_normal_search_club")
    
    # –ú–æ—ë –æ–±—ä—è–≤–ª–µ–Ω–∏–µ
    dp.register_callback_query_handler(lambda call: process_my_announcement(call, locale, "team"), lambda c: c.data == "my_announcement_team")
    dp.register_callback_query_handler(lambda call: process_my_announcement(call, locale, "club"), lambda c: c.data == "my_announcement_club")
    
    # –ò–∑–±—Ä–∞–Ω–Ω–æ–µ
    dp.register_callback_query_handler(lambda call: process_favorite(call, locale, "team"), lambda c: c.data.startswith("favorite:") and "team" in c.data)
    dp.register_callback_query_handler(lambda call: process_favorite(call, locale, "club"), lambda c: c.data.startswith("favorite:") and "club" in c.data)
    
    # –†–µ–ø–æ—Ä—Ç
    dp.register_callback_query_handler(lambda call: process_report(call, locale, "team"), lambda c: c.data.startswith("report:") and "team" in c.data)
    dp.register_callback_query_handler(lambda call: process_report(call, locale, "club"), lambda c: c.data.startswith("report:") and "club" in c.data)
    dp.register_callback_query_handler(lambda call: process_report_reason(call, locale), lambda c: c.data.startswith("report_reason:"))
    
    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è
    dp.register_callback_query_handler(lambda call: process_filtered_search(call, locale, "team"), lambda c: c.data.startswith("filtered_search_team"))
    dp.register_callback_query_handler(lambda call: process_filtered_search(call, locale, "club"), lambda c: c.data.startswith("filtered_search_club"))
    
    # –ù–∞–∑–∞–¥
    dp.register_callback_query_handler(lambda call: process_back_to_search_menu(call, locale), lambda c: c.data == "back_to_search_menu")
    dp.register_callback_query_handler(lambda call: process_back_report(call, locale), lambda c: c.data.startswith("back_report:"))
        

    dp.register_callback_query_handler(lambda call, state: process_next_team(call, locale, state), lambda c: c.data == "next:team")
    dp.register_callback_query_handler(lambda call, state: process_next_club(call, locale, state), lambda c: c.data == "next:club")
    
    dp.register_callback_query_handler(lambda call: show_filters_team(call, locale), lambda c: c.data == "show_filters_team")
    dp.register_callback_query_handler(lambda call: show_filters_club(call, locale), lambda c: c.data == "show_filters_club")


    dp.register_callback_query_handler(lambda call: process_report_selection(call, locale), lambda c: c.data.startswith("confirm_report_selection:"))
    dp.register_callback_query_handler(lambda call: confirm_report(call, locale), lambda c: c.data.startswith("confirm_report:"))
    dp.register_callback_query_handler(lambda call: cancel_report(call, locale), lambda c: c.data.startswith("cancel_report:"))
