import logging
from aiogram import types
from aiogram.dispatcher import Dispatcher
from database.session import SessionLocal
from database.models import User, Achievement, UserAchievement
from utils.achievements import format_achievements_message, check_and_award_achievements, ACHIEVEMENTS
from keyboards.inline_keyboard import (
    achievements_keyboard, 
    back_to_achievements_keyboard, 
    buy_achievement_confirm_keyboard,
    profile_view_keyboard,
    search_team_menu_keyboard,
    search_club_menu_keyboard,
    announcement_keyboard
)
from database.achievements import (
    get_user_achievements, 
    get_available_achievements, 
    buy_achievement, 
    record_secret_purchase,
    has_purchased_secret,
    initialize_achievements,
    check_coins_achievement,
    ACHIEVEMENT_MAJOR
)
from utils.helpers import (
    get_user_language,
    get_announcement_by_id,
    get_favorites_list,
    get_announcements_count
)
from aiogram.utils.exceptions import MessageNotModified
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from handlers.search import display_announcement_with_keyword
from handlers.favorites import send_new_announcement_media
from aiogram.dispatcher import FSMContext

logger = logging.getLogger(__name__)

SECRET_VIDEO_PRICE = 5000
SECRET_VIDEO_KEY = "bubbs_video"

# –¢–µ–∫—Å—Ç –¥–ª—è —Å–µ–∫—Ä–µ—Ç–Ω–æ–≥–æ –≤–∏–¥–µ–æ
SECRET_VIDEO_URL = "https://www.youtube.com/watch?v=dQw4w9WgXcQ"  # –ó–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É
SECRET_VIDEO_TEXT = "üî• –°–µ–∫—Ä–µ—Ç–Ω—ã–π —Ä–æ–ª–∏–∫ –±—É–±—Å–∞! –ù–∞—Å–ª–∞–∂–¥–∞–π—Ç–µ—Å—å –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–º: "


async def show_achievements(callback: types.CallbackQuery, locale):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        logging.info(f"Raw callback data received: '{callback.data}'")
        logging.info(f"Callback type: {type(callback.data)}")
        logging.info(f"User ID: {callback.from_user.id}")
        
        # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
        try:
            await callback.answer("–ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π...")
        except Exception as e:
            logging.error(f"Error answering callback: {e}")
        
        db = SessionLocal()
        try:
            user = db.query(User).filter(User.user_id == callback.from_user.id).first()
            if not user:
                logging.info(f"Creating new user with ID {callback.from_user.id}")
                user = User(id=callback.from_user.id, tg_id=callback.from_user.id)
                db.add(user)
                db.commit()
            
            achievements = user.achievements or []
            message = format_achievements_message(achievements, locale)
            
            try:
                await callback.message.edit_text(
                    text=message,
                    reply_markup=achievements_keyboard(locale)
                )
                logging.info("Message edited successfully")
            except Exception as e:
                logging.error(f"Error editing message: {e}")
                await callback.message.answer(
                    text=message,
                    reply_markup=achievements_keyboard(locale)
                )
                logging.info("Sent new message as fallback")
        finally:
            db.close()
    except Exception as e:
        logging.error(f"Global error in show_achievements: {e}")


async def cmd_achievements(callback: types.CallbackQuery, locale):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π"""
    locale = get_user_language(callback.from_user.id)
    await callback.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_achievements = get_user_achievements(callback.from_user.id)
    total_achievements = len(ACHIEVEMENTS)
    count = len(user_achievements) if user_achievements else 0
    
    text = locale.get("achievements_text", "üèÜ –í–∞—à–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è: {count}/{total}").format(
        count=count, 
        total=total_achievements
    )
    kb = achievements_keyboard(locale)
    
    await safe_edit_message(callback.message, text, reply_markup=kb)


async def process_my_achievements(callback: types.CallbackQuery, locale):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    locale = get_user_language(callback.from_user.id)
    await callback.answer()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ "–õ–∏–ø—Ä–∏–∫–æ–Ω" (–µ—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å 15000+ –º–æ–Ω–µ—Ç)
    check_coins_achievement(callback.from_user.id)
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_achievements = get_user_achievements(callback.from_user.id)
    
    if not user_achievements:
        text = locale.get("no_achievements", "üèÖ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è, —á—Ç–æ–±—ã –∏—Ö –ø–æ–ª—É—á–∏—Ç—å!")
    else:
        text = locale.get("achievements_list", "üìã –°–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π:") + "\n\n"
        
        for achievement in user_achievements:
            achieved_date = achievement['achieved_at'].strftime("%d.%m.%Y")
            text += f"{achievement['icon']} {achievement['name']} - {achievement['description']}\n"
            text += locale.get("achievement_date", "üìÖ –ü–æ–ª—É—á–µ–Ω–æ: {date}").format(date=achieved_date) + "\n\n"
    
    kb = back_to_achievements_keyboard(locale)
    
    await safe_edit_message(callback.message, text, reply_markup=kb)


async def process_available_achievements(callback: types.CallbackQuery, locale):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π"""
    locale = get_user_language(callback.from_user.id)
    await callback.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
    available_achievements = get_available_achievements(callback.from_user.id)
    
    if not available_achievements:
        text = locale.get("no_available_achievements", "üéñ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –ø–æ–ª—É—á–∏–ª–∏ –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è!")
    else:
        text = locale.get("achievements_available", "üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è:") + "\n\n"
        
        for achievement in available_achievements:
            text += f"{achievement.icon} {achievement.name} - {achievement.description}\n"
            
            if achievement.is_purchasable:
                text += locale.get("achievement_price", "üéÅ –¶–µ–Ω–∞: {price} –º–æ–Ω–µ—Ç").format(price=achievement.price) + "\n"
            
            text += "\n"
    
    kb = back_to_achievements_keyboard(locale)
    
    await safe_edit_message(callback.message, text, reply_markup=kb)


async def process_buy_achievement(callback: types.CallbackQuery, locale):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π"""
    locale = get_user_language(callback.from_user.id)
    await callback.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–∫—É–ø–∞–µ–º—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
    available_achievements = get_available_achievements(callback.from_user.id)
    purchasable_achievements = [a for a in available_achievements if a.is_purchasable]
    
    if not purchasable_achievements:
        text = locale.get("no_purchasable_achievements", "üõí –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π.")
    else:
        text = locale.get("buy_achievement_text", "üí∞ –í—ã–±–µ—Ä–∏—Ç–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–∫—É–ø–∫–∏:") + "\n\n"
        
        for achievement in purchasable_achievements:
            text += f"{achievement.icon} {achievement.name} - {achievement.description}\n"
            text += locale.get("achievement_price", "üéÅ –¶–µ–Ω–∞: {price} –º–æ–Ω–µ—Ç").format(price=achievement.price) + "\n\n"
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    kb = types.InlineKeyboardMarkup(row_width=1)
    
    # –ï—Å–ª–∏ –µ—Å—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ "–ú–∞–∂–æ—Ä", –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –µ–≥–æ –ø–æ–∫—É–ø–∫–∏
    major_achievement = next((a for a in purchasable_achievements if a.key == ACHIEVEMENT_MAJOR), None)
    if major_achievement:
        kb.add(types.InlineKeyboardButton(
            text=locale.get("button_buy", "üí∞ –ö—É–ø–∏—Ç—å"), 
            callback_data=f"confirm_buy_achievement:{major_achievement.id}"
        ))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã
    kb.add(types.InlineKeyboardButton(
        text=locale.get("button_cancel", "üîô –û—Ç–º–µ–Ω–∞"), 
        callback_data="back_to_achievements"
    ))
    
    await safe_edit_message(callback.message, text, reply_markup=kb)


async def process_confirm_buy_achievement(callback: types.CallbackQuery, locale):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–∫—É–ø–∫–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è"""
    locale = get_user_language(callback.from_user.id)
    
    # –ü–æ–ª—É—á–∞–µ–º ID –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∏–∑ callback_data
    achievement_id = int(callback.data.split(":")[1])
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–ª—é—á –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ ID (–ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ —ç—Ç–æ "–ú–∞–∂–æ—Ä")
    achievement_key = ACHIEVEMENT_MAJOR
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏
    db = SessionLocal()
    achievement = db.query(Achievement).filter(Achievement.id == achievement_id).first()
    db.close()
    
    # –ü–æ–∫—É–ø–∞–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ
    result = buy_achievement(callback.from_user.id, achievement_key)
    
    if result["success"]:
        text = locale.get("buy_achievement_success", "‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–æ–±—Ä–µ–ª–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ: {name}").format(name=achievement.name)
    else:
        if result["reason"] == "not_enough_coins":
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            db = SessionLocal()
            user = db.query(User).filter(User.tg_id == callback.from_user.id).first()
            user_crystals = user.crystals if user else 0
            db.close()
            
            text = locale.get("buy_achievement_not_enough_coins", "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç. –£ –≤–∞—Å {balance}, –Ω–æ –Ω—É–∂–Ω–æ {price}").format(
                balance=user_crystals,
                price=achievement.price
            )
        elif result["reason"] == "already_awarded":
            text = locale.get("buy_achievement_already_owned", "‚ùå –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å —ç—Ç–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ")
        else:
            text = locale.get("buy_achievement_error", "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è: {error}").format(error=result["reason"])
    
    await callback.answer()
    kb = back_to_achievements_keyboard(locale)
    
    await safe_edit_message(callback.message, text, reply_markup=kb)


async def process_secret_content(callback: types.CallbackQuery, locale):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞ —Å–µ–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
    locale = get_user_language(callback.from_user.id)
    await callback.answer()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–∫—É–ø–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
    has_video = has_purchased_secret(callback.from_user.id, SECRET_VIDEO_KEY)
    
    if has_video:
        text = locale.get("secret_content_text", "üîç –°–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç: {name}\n\n{content}").format(
            name=locale.get("secret_video_name", "–°–µ–∫—Ä–µ—Ç–Ω—ã–π —Ä–æ–ª–∏–∫ –±—É–±—Å–∞"),
            content=SECRET_VIDEO_URL
        )
        kb = back_to_achievements_keyboard(locale)
    else:
        text = locale.get("buy_secret_text", "üîç –í—ã–±–µ—Ä–∏—Ç–µ —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –ø–æ–∫—É–ø–∫–∏:")
        kb = secret_content_keyboard(locale)
    
    try:
        await callback.message.edit_text(text, reply_markup=kb, disable_web_page_preview=False)
    except Exception as e:
        logging.error(f"Error editing message: {e}")
        await callback.message.answer(
            text=text,
            reply_markup=kb
        )
        logging.info("Sent new message as fallback")


async def process_buy_secret_video(callback: types.CallbackQuery, locale):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ —Å–µ–∫—Ä–µ—Ç–Ω–æ–≥–æ –≤–∏–¥–µ–æ"""
    locale = get_user_language(callback.from_user.id)
    await callback.answer()
    
    text = locale.get("buy_secret_confirm", "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç \"{name}\" –∑–∞ {price} –º–æ–Ω–µ—Ç?").format(
        name=locale.get("secret_video_name", "–°–µ–∫—Ä–µ—Ç–Ω—ã–π —Ä–æ–ª–∏–∫ –±—É–±—Å–∞"),
        price=SECRET_VIDEO_PRICE
    )
    kb = confirm_secret_purchase_keyboard(locale, SECRET_VIDEO_KEY)
    
    try:
        await callback.message.edit_text(text, reply_markup=kb)
    except Exception as e:
        logging.error(f"Error editing message: {e}")
        await callback.message.answer(
            text=text,
            reply_markup=kb
        )
        logging.info("Sent new message as fallback")


async def process_confirm_secret_purchase(callback: types.CallbackQuery, locale):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–∫—É–ø–∫–∏ —Å–µ–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
    locale = get_user_language(callback.from_user.id)
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–ª—é—á –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∏–∑ callback_data
    content_key = callback.data.split(":")[1]
    
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –ø–æ–∫—É–ø–∫—É –∏ –≤—ã–¥–∞–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ
    result = record_secret_purchase(callback.from_user.id, content_key, SECRET_VIDEO_PRICE)
    
    await callback.answer()
    
    if result["success"]:
        text = locale.get("buy_secret_success", "‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–æ–±—Ä–µ–ª–∏ —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç: {name}").format(
            name=locale.get("secret_video_name", "–°–µ–∫—Ä–µ—Ç–Ω—ã–π —Ä–æ–ª–∏–∫ –±—É–±—Å–∞")
        )
        text += "\n\n" + locale.get("secret_content_text", "üîç –°–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç: {name}\n\n{content}").format(
            name=locale.get("secret_video_name", "–°–µ–∫—Ä–µ—Ç–Ω—ã–π —Ä–æ–ª–∏–∫ –±—É–±—Å–∞"),
            content=SECRET_VIDEO_URL
        )
    else:
        if result["reason"] == "not_enough_coins":
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            db = SessionLocal()
            user = db.query(User).filter(User.tg_id == callback.from_user.id).first()
            user_crystals = user.crystals if user else 0
            db.close()
            
            text = locale.get("buy_secret_not_enough_coins", "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç. –£ –≤–∞—Å {balance}, –Ω–æ –Ω—É–∂–Ω–æ {price}").format(
                balance=user_crystals,
                price=SECRET_VIDEO_PRICE
            )
        elif result["reason"] == "already_purchased":
            text = locale.get("buy_secret_already_owned", "‚ùå –í—ã —É–∂–µ –ø—Ä–∏–æ–±—Ä–µ–ª–∏ —ç—Ç–æ—Ç —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç")
        else:
            text = locale.get("buy_secret_error", "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ —Å–µ–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞: {error}").format(
                error=result["reason"]
            )
    
    kb = back_to_achievements_keyboard(locale)
    
    await safe_edit_message(callback.message, text, reply_markup=kb, disable_web_page_preview=False)


async def safe_edit_message(message, text, reply_markup=None, **kwargs):
    """
    –ë–µ–∑–æ–ø–∞—Å–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—è –æ—à–∏–±–∫—É MessageNotModified
    """
    try:
        await message.edit_text(text, reply_markup=reply_markup, **kwargs)
    except MessageNotModified:
        # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å
        logging.info("Message not modified, ignoring")
    except Exception as e:
        logging.error(f"Error editing message: {e}")
        try:
            await message.answer(text, reply_markup=reply_markup, **kwargs)
            logging.info("Sent new message as fallback")
        except Exception as e2:
            logging.error(f"Error sending fallback message: {e2}")


async def back_to_achievements(callback: types.CallbackQuery, locale):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ '–ù–∞–∑–∞–¥ –∫ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è–º'"""
    locale = get_user_language(callback.from_user.id)
    await callback.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_achievements = get_user_achievements(callback.from_user.id)
    total_achievements = len(ACHIEVEMENTS)
    count = len(user_achievements) if user_achievements else 0
    
    text = locale.get("achievements_text", "üèÜ –í–∞—à–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è: {count}/{total}").format(
        count=count, 
        total=total_achievements
    )
    kb = achievements_keyboard(locale)
    
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ
    await callback.message.delete()
    await callback.message.answer(text, reply_markup=kb)


async def view_profile(callback: types.CallbackQuery, locale, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = int(callback.data.split(":")[1])
    announcement_type = callback.data.split(":")[2]
    await callback.answer()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π ID –æ–±—ä—è–≤–ª–µ–Ω–∏—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    data = await state.get_data()
    current_announcement_id = None
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π ID –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∏–∑ callback.message
    message_text = callback.message.caption or callback.message.text
    if message_text:
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ ID –æ–±—ä—è–≤–ª–µ–Ω–∏—è –≤ —Ç–µ–∫—Å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            import re
            match = re.search(r'ID: (\d+)', message_text)
            if match:
                current_announcement_id = int(match.group(1))
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –≤ –Ω—É–∂–Ω–æ–º –∫–ª—é—á–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
                if announcement_type == "team":
                    await state.update_data(current_team_announcement_id=current_announcement_id)
                elif announcement_type == "club":
                    await state.update_data(current_club_announcement_id=current_announcement_id)
                elif announcement_type == "favorites":
                    # –î–ª—è –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ –Ω–∞–º –Ω–µ –Ω—É–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å ID, —Ç–∞–∫ –∫–∞–∫ –º—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏–Ω–¥–µ–∫—Å
                    pass
        except Exception as e:
            logger.error(f"Error extracting announcement ID: {e}")
    
    db = SessionLocal()
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        user = db.query(User).filter(User.tg_id == user_id).first()
        if not user:
            await callback.message.answer(
                locale.get("user_not_found", "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"),
                reply_markup=profile_view_keyboard(locale, user_id, announcement_type)
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_achievements = get_user_achievements(user_id)
        achievements_count = len(user_achievements) if user_achievements else 0
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        status = "üëë Premium" if user.is_premium else "üë§ –û–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –±–∞–∑–æ–≤—ã–π —Ç–µ–∫—Å—Ç –ø—Ä–æ—Ñ–∏–ª—è
        text = locale.get("profile_text", """
üë§ –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

üìù ID: {user_id}
üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏–π: {achievements_count}
ü™ô –ú–æ–Ω–µ—Ç: {crystals}
üìä –°—Ç–∞—Ç—É—Å: {status}
üìÖ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {reg_date}""").format(
            user_id=user.tg_id,
            achievements_count=achievements_count,
            crystals=user.crystals,
            status=status,
            reg_date=user.created_at.strftime("%d.%m.%Y")
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        if user_achievements:
            text += "\n\nüìã –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π:\n"
            for achievement in user_achievements:
                text += f"{achievement['icon']} {achievement['name']}\n"
        
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
        await callback.message.delete()
        await callback.message.answer(
            text,
            reply_markup=profile_view_keyboard(locale, user_id, announcement_type)
        )
    
    finally:
        db.close()


async def view_user_achievements(callback: types.CallbackQuery, locale):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = int(callback.data.split(":")[1])
    announcement_type = callback.data.split(":")[2]
    await callback.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_achievements = get_user_achievements(user_id)
    
    if not user_achievements:
        text = locale.get("no_user_achievements", "üèÖ –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π.")
    else:
        text = locale.get("user_achievements_list", "üìã –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:") + "\n\n"
        
        for achievement in user_achievements:
            achieved_date = achievement['achieved_at'].strftime("%d.%m.%Y")
            text += f"{achievement['icon']} {achievement['name']} - {achievement['description']}\n"
            text += locale.get("achievement_date", "üìÖ –ü–æ–ª—É—á–µ–Ω–æ: {date}").format(date=achieved_date) + "\n\n"
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥"
    kb = InlineKeyboardMarkup(row_width=1)
    kb.add(
        InlineKeyboardButton(
            text=locale.get("button_write", "‚úçÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å"), 
            url=f"tg://user?id={user_id}"
        )
    )
    kb.add(
        InlineKeyboardButton(
            text=locale.get("button_back", "üîô –ù–∞–∑–∞–¥"), 
            callback_data=f"back_to_announcement:{announcement_type}"
        )
    )
    
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
    await callback.message.delete()
    await callback.message.answer(text, reply_markup=kb)


async def back_to_announcement(callback: types.CallbackQuery, locale, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –æ–±—ä—è–≤–ª–µ–Ω–∏—é"""
    announcement_type = callback.data.split(":")[1]
    await callback.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    
    # –ü–æ–ª—É—á–∞–µ–º ID —Ç–µ–∫—É—â–µ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    current_announcement_id = None
    if announcement_type == "team":
        current_announcement_id = data.get("current_team_announcement_id")
    elif announcement_type == "club":
        current_announcement_id = data.get("current_club_announcement_id")
    elif announcement_type == "favorites":
        favorite_index = data.get("favorite_index", 0)
        fav_list = get_favorites_list(callback.from_user.id)
        if fav_list and 0 <= favorite_index < len(fav_list):
            current_announcement_id = fav_list[favorite_index]
    
    if current_announcement_id:
        # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ
        announcement = get_announcement_by_id(current_announcement_id)
        if announcement:
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è has_next –∏ has_prev
            count = get_announcements_count(announcement_type, callback.from_user.id)
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –∏–Ω–¥–µ–∫—Å –æ–±—ä—è–≤–ª–µ–Ω–∏—è
            current_index = data.get("announcement_page", 0)
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–ª–µ–¥—É—é—â–∏—Ö –∏ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π
            has_next = current_index < count - 1
            has_prev = current_index > 0
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            text = display_announcement_with_keyword(announcement, locale)
            keyboard = announcement_keyboard(
                locale,
                announcement["id"],
                announcement["user_id"],
                has_next,
                has_prev,
                announcement_type
            )
            
            # –£–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await callback.message.delete()
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –∑–∞–Ω–æ–≤–æ
            await send_new_announcement_media(
                callback.message.bot,
                callback.from_user.id,
                announcement,
                text,
                keyboard
            )
            return
    
    # –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é –ø–æ–∏—Å–∫–∞
    from keyboards.inline_keyboard import search_team_menu_keyboard, search_club_menu_keyboard
    kb = search_team_menu_keyboard(locale) if announcement_type == "team" else search_club_menu_keyboard(locale)
    await callback.message.edit_text(
        locale.get("search_menu_text", "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"),
        reply_markup=kb
    )


def register_handlers_achievements(dp: Dispatcher, locale):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π"""
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    initialize_achievements()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    dp.register_callback_query_handler(
        lambda c: cmd_achievements(c, locale),
        lambda c: c.data == "achievements"
    )
    dp.register_callback_query_handler(
        lambda c: process_my_achievements(c, locale),
        lambda c: c.data == "my_achievements"
    )
    dp.register_callback_query_handler(
        lambda c: process_available_achievements(c, locale),
        lambda c: c.data == "available_achievements"
    )
    dp.register_callback_query_handler(
        lambda c: process_buy_achievement(c, locale),
        lambda c: c.data == "buy_achievement"
    )
    dp.register_callback_query_handler(
        lambda c: process_confirm_buy_achievement(c, locale),
        lambda c: c.data.startswith("confirm_buy_achievement:")
    )
    dp.register_callback_query_handler(
        lambda c: process_secret_content(c, locale),
        lambda c: c.data == "secret_content"
    )
    dp.register_callback_query_handler(
        lambda c: process_buy_secret_video(c, locale),
        lambda c: c.data == "buy_secret_video"
    )
    dp.register_callback_query_handler(
        lambda c: process_confirm_secret_purchase(c, locale),
        lambda c: c.data.startswith("confirm_secret_purchase:")
    )
    dp.register_callback_query_handler(
        lambda c: back_to_achievements(c, locale),
        lambda c: c.data == "back_to_achievements"
    )
    dp.register_callback_query_handler(
        lambda c, state: view_profile(c, locale, state),
        lambda c: c.data.startswith("view_profile:"),
        state="*"
    )
    dp.register_callback_query_handler(
        lambda c, state: back_to_announcement(c, locale, state),
        lambda c: c.data.startswith("back_to_announcement:"),
        state="*"
    )
    logging.info("Achievements handlers registered successfully") 