import logging
from aiogram import types
from aiogram.dispatcher import Dispatcher
from database.session import SessionLocal
from database.models import User
from utils.achievements import format_achievements_message, check_and_award_achievements, ACHIEVEMENTS
from keyboards.inline_keyboard import (
    achievements_keyboard, 
    back_to_achievements_keyboard, 
    buy_achievement_confirm_keyboard,
    secret_content_keyboard,
    confirm_secret_purchase_keyboard
)
from database.achievements import (
    get_user_achievements, 
    get_available_achievements, 
    buy_achievement, 
    record_secret_purchase,
    has_purchased_secret,
    initialize_achievements,
    check_coins_achievement,
    ACHIEVEMENT_MAJOR
)
from utils.helpers import get_user_language

logger = logging.getLogger(__name__)

SECRET_VIDEO_PRICE = 5000
SECRET_VIDEO_KEY = "bubbs_video"

# –¢–µ–∫—Å—Ç –¥–ª—è —Å–µ–∫—Ä–µ—Ç–Ω–æ–≥–æ –≤–∏–¥–µ–æ
SECRET_VIDEO_URL = "https://www.youtube.com/watch?v=dQw4w9WgXcQ"  # –ó–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É
SECRET_VIDEO_TEXT = "üî• –°–µ–∫—Ä–µ—Ç–Ω—ã–π —Ä–æ–ª–∏–∫ –±—É–±—Å–∞! –ù–∞—Å–ª–∞–∂–¥–∞–π—Ç–µ—Å—å –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–º: "


async def show_achievements(callback: types.CallbackQuery, locale):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        logging.info(f"Raw callback data received: '{callback.data}'")
        logging.info(f"Callback type: {type(callback.data)}")
        logging.info(f"User ID: {callback.from_user.id}")
        
        # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
        try:
            await callback.answer("–ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π...")
        except Exception as e:
            logging.error(f"Error answering callback: {e}")
        
        db = SessionLocal()
        try:
            user = db.query(User).filter(User.user_id == callback.from_user.id).first()
            if not user:
                logging.info(f"Creating new user with ID {callback.from_user.id}")
                user = User(id=callback.from_user.id, tg_id=callback.from_user.id)
                db.add(user)
                db.commit()
            
            achievements = user.achievements or []
            message = format_achievements_message(achievements, locale)
            
            try:
                await callback.message.edit_text(
                    text=message,
                    reply_markup=achievements_keyboard(locale)
                )
                logging.info("Message edited successfully")
            except Exception as e:
                logging.error(f"Error editing message: {e}")
                await callback.message.answer(
                    text=message,
                    reply_markup=achievements_keyboard(locale)
                )
                logging.info("Sent new message as fallback")
        finally:
            db.close()
    except Exception as e:
        logging.error(f"Global error in show_achievements: {e}")


async def cmd_achievements(callback: types.CallbackQuery, locale):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π"""
    locale = get_user_language(callback.from_user.id)
    await callback.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_achievements = get_user_achievements(callback.from_user.id)
    total_achievements = len(ACHIEVEMENTS)
    count = len(user_achievements) if user_achievements else 0
    
    text = locale.get("achievements_text", "üèÜ –í–∞—à–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è: {count}/{total}").format(
        count=count, 
        total=total_achievements
    )
    kb = achievements_keyboard(locale)
    
    await callback.message.edit_text(text, reply_markup=kb)


async def process_my_achievements(callback: types.CallbackQuery, locale):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    locale = get_user_language(callback.from_user.id)
    await callback.answer()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ "–õ–∏–ø—Ä–∏–∫–æ–Ω" (–µ—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å 15000+ –º–æ–Ω–µ—Ç)
    check_coins_achievement(callback.from_user.id)
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_achievements = get_user_achievements(callback.from_user.id)
    
    if not user_achievements:
        text = locale.get("no_achievements", "üèÖ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è, —á—Ç–æ–±—ã –∏—Ö –ø–æ–ª—É—á–∏—Ç—å!")
    else:
        text = locale.get("achievements_list", "üìã –°–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π:") + "\n\n"
        
        for achievement in user_achievements:
            achieved_date = achievement['achieved_at'].strftime("%d.%m.%Y")
            text += f"{achievement['icon']} {achievement['name']} - {achievement['description']}\n"
            text += locale.get("achievement_date", "üìÖ –ü–æ–ª—É—á–µ–Ω–æ: {date}").format(date=achieved_date) + "\n\n"
    
    kb = back_to_achievements_keyboard(locale)
    
    await callback.message.edit_text(text, reply_markup=kb)


async def process_available_achievements(callback: types.CallbackQuery, locale):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π"""
    locale = get_user_language(callback.from_user.id)
    await callback.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
    available_achievements = get_available_achievements(callback.from_user.id)
    
    if not available_achievements:
        text = locale.get("no_available_achievements", "üéñ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –ø–æ–ª—É—á–∏–ª–∏ –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è!")
    else:
        text = locale.get("achievements_available", "üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è:") + "\n\n"
        
        for achievement in available_achievements:
            text += f"{achievement.icon} {achievement.name} - {achievement.description}\n"
            
            if achievement.is_purchasable:
                text += locale.get("achievement_reward", "üéÅ –ù–∞–≥—Ä–∞–¥–∞: {reward} –º–æ–Ω–µ—Ç").format(reward=achievement.price) + "\n"
                text += locale.get("achievement_not_completed", "‚ùå –ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ") + "\n"
            
            text += "\n"
    
    kb = back_to_achievements_keyboard(locale)
    
    await callback.message.edit_text(text, reply_markup=kb)


async def process_buy_achievement(callback: types.CallbackQuery, locale):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π"""
    locale = get_user_language(callback.from_user.id)
    await callback.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–∫—É–ø–∞–µ–º—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
    available_achievements = get_available_achievements(callback.from_user.id)
    purchasable_achievements = [a for a in available_achievements if a.is_purchasable]
    
    if not purchasable_achievements:
        text = locale.get("no_purchasable_achievements", "üõí –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π.")
    else:
        text = locale.get("buy_achievement_text", "üí∞ –í—ã–±–µ—Ä–∏—Ç–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–∫—É–ø–∫–∏:") + "\n\n"
        
        for achievement in purchasable_achievements:
            text += f"{achievement.icon} {achievement.name} - {achievement.description}\n"
            text += locale.get("achievement_reward", "üéÅ –ù–∞–≥—Ä–∞–¥–∞: {reward} –º–æ–Ω–µ—Ç").format(reward=achievement.price) + "\n\n"
    
    # –ï—Å–ª–∏ –µ—Å—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ "–ú–∞–∂–æ—Ä", –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –µ–≥–æ –ø–æ–∫—É–ø–∫–∏
    major_achievement = next((a for a in purchasable_achievements if a.key == ACHIEVEMENT_MAJOR), None)
    
    if major_achievement:
        kb = buy_achievement_confirm_keyboard(locale, major_achievement.id)
    else:
        kb = back_to_achievements_keyboard(locale)
    
    await callback.message.edit_text(text, reply_markup=kb)


async def process_confirm_buy_achievement(callback: types.CallbackQuery, locale):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–∫—É–ø–∫–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è"""
    locale = get_user_language(callback.from_user.id)
    
    # –ü–æ–ª—É—á–∞–µ–º ID –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∏–∑ callback_data
    achievement_id = int(callback.data.split(":")[1])
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–ª—é—á –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ ID (–ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ —ç—Ç–æ "–ú–∞–∂–æ—Ä")
    achievement_key = ACHIEVEMENT_MAJOR
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏
    db = SessionLocal()
    achievement = db.query(Achievement).filter(Achievement.id == achievement_id).first()
    db.close()
    
    # –ü–æ–∫—É–ø–∞–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ
    result = buy_achievement(callback.from_user.id, achievement_key)
    
    if result["success"]:
        text = locale.get("buy_achievement_success", "‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–æ–±—Ä–µ–ª–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ: {name}").format(name=achievement.name)
        text += "\n\n" + locale.get("achievement_reward_received", "üí∞ –í—ã –ø–æ–ª—É—á–∏–ª–∏ {reward} –º–æ–Ω–µ—Ç –≤ –∫–∞—á–µ—Å—Ç–≤–µ –Ω–∞–≥—Ä–∞–¥—ã!").format(reward=achievement.price)
    else:
        if result["reason"] == "not_enough_coins":
            text = locale.get("buy_achievement_not_enough_coins", "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç. –£ –≤–∞—Å {balance}, –Ω–æ –Ω—É–∂–Ω–æ {price}").format(
                balance=result["crystals"],
                price=achievement.price
            )
        elif result["reason"] == "already_awarded":
            text = locale.get("buy_achievement_already_owned", "‚ùå –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å —ç—Ç–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ")
        else:
            text = locale.get("buy_achievement_error", "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è: {error}").format(error=result["reason"])
    
    await callback.answer()
    kb = back_to_achievements_keyboard(locale)
    
    await callback.message.edit_text(text, reply_markup=kb)


async def process_secret_content(callback: types.CallbackQuery, locale):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞ —Å–µ–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
    locale = get_user_language(callback.from_user.id)
    await callback.answer()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–∫—É–ø–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
    has_video = has_purchased_secret(callback.from_user.id, SECRET_VIDEO_KEY)
    
    if has_video:
        text = locale.get("secret_content_text", "üîç –°–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç: {name}\n\n{content}").format(
            name=locale.get("secret_video_name", "–°–µ–∫—Ä–µ—Ç–Ω—ã–π —Ä–æ–ª–∏–∫ –±—É–±—Å–∞"),
            content=SECRET_VIDEO_URL
        )
        kb = back_to_achievements_keyboard(locale)
    else:
        text = locale.get("buy_secret_text", "üîç –í—ã–±–µ—Ä–∏—Ç–µ —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –ø–æ–∫—É–ø–∫–∏:")
        kb = secret_content_keyboard(locale)
    
    await callback.message.edit_text(text, reply_markup=kb, disable_web_page_preview=False)


async def process_buy_secret_video(callback: types.CallbackQuery, locale):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ —Å–µ–∫—Ä–µ—Ç–Ω–æ–≥–æ –≤–∏–¥–µ–æ"""
    locale = get_user_language(callback.from_user.id)
    await callback.answer()
    
    text = locale.get("buy_secret_confirm", "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç \"{name}\" –∑–∞ {price} –º–æ–Ω–µ—Ç?").format(
        name=locale.get("secret_video_name", "–°–µ–∫—Ä–µ—Ç–Ω—ã–π —Ä–æ–ª–∏–∫ –±—É–±—Å–∞"),
        price=SECRET_VIDEO_PRICE
    )
    kb = confirm_secret_purchase_keyboard(locale, SECRET_VIDEO_KEY)
    
    await callback.message.edit_text(text, reply_markup=kb)


async def process_confirm_secret_purchase(callback: types.CallbackQuery, locale):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–∫—É–ø–∫–∏ —Å–µ–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
    locale = get_user_language(callback.from_user.id)
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–ª—é—á –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∏–∑ callback_data
    content_key = callback.data.split(":")[1]
    
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –ø–æ–∫—É–ø–∫—É –∏ –≤—ã–¥–∞–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ
    result = record_secret_purchase(callback.from_user.id, content_key, SECRET_VIDEO_PRICE)
    
    await callback.answer()
    
    if result["success"]:
        text = locale.get("buy_secret_success", "‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–æ–±—Ä–µ–ª–∏ —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç: {name}").format(
            name=locale.get("secret_video_name", "–°–µ–∫—Ä–µ—Ç–Ω—ã–π —Ä–æ–ª–∏–∫ –±—É–±—Å–∞")
        )
        text += "\n\n" + locale.get("secret_content_text", "üîç –°–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç: {name}\n\n{content}").format(
            name=locale.get("secret_video_name", "–°–µ–∫—Ä–µ—Ç–Ω—ã–π —Ä–æ–ª–∏–∫ –±—É–±—Å–∞"),
            content=SECRET_VIDEO_URL
        )
    else:
        if result["reason"] == "not_enough_coins":
            text = locale.get("buy_secret_not_enough_coins", "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç. –£ –≤–∞—Å {balance}, –Ω–æ –Ω—É–∂–Ω–æ {price}").format(
                balance=result["crystals"],
                price=SECRET_VIDEO_PRICE
            )
        elif result["reason"] == "already_purchased":
            text = locale.get("buy_secret_already_owned", "‚ùå –í—ã —É–∂–µ –ø—Ä–∏–æ–±—Ä–µ–ª–∏ —ç—Ç–æ—Ç —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç")
        else:
            text = locale.get("buy_secret_error", "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ —Å–µ–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞: {error}").format(
                error=result["reason"]
            )
    
    kb = back_to_achievements_keyboard(locale)
    
    await callback.message.edit_text(text, reply_markup=kb, disable_web_page_preview=False)


def register_handlers_achievements(dp: Dispatcher, locale):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π"""
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    initialize_achievements()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    dp.register_callback_query_handler(
        lambda c: cmd_achievements(c, locale),
        lambda c: c.data == "achievements"
    )
    dp.register_callback_query_handler(
        lambda c: process_my_achievements(c, locale),
        lambda c: c.data == "my_achievements"
    )
    dp.register_callback_query_handler(
        lambda c: process_available_achievements(c, locale),
        lambda c: c.data == "available_achievements"
    )
    dp.register_callback_query_handler(
        lambda c: process_buy_achievement(c, locale),
        lambda c: c.data == "buy_achievement"
    )
    dp.register_callback_query_handler(
        lambda c: process_confirm_buy_achievement(c, locale),
        lambda c: c.data.startswith("confirm_buy_achievement:")
    )
    dp.register_callback_query_handler(
        lambda c: process_secret_content(c, locale),
        lambda c: c.data == "secret_content"
    )
    dp.register_callback_query_handler(
        lambda c: process_buy_secret_video(c, locale),
        lambda c: c.data == "buy_secret_video"
    )
    dp.register_callback_query_handler(
        lambda c: process_confirm_secret_purchase(c, locale),
        lambda c: c.data.startswith("confirm_secret_purchase:")
    )
    logging.info("Achievements handlers registered successfully") 