from aiogram import types
from aiogram.dispatcher import Dispatcher, FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from config import ADMIN_IDS
from keyboards.inline_keyboard import admin_panel_keyboard, admin_premium_duration_keyboard, admin_premium_keyboard, admin_sponsors_keyboard, admin_sponsor_item_keyboard, admin_sponsor_confirm_delete_keyboard, admin_keyboard, back_to_admin_keyboard
from database.crud import update_user_premium, get_premium_prices, update_premium_price, get_sponsors, add_sponsor, update_sponsor, delete_sponsor, add_promo_code, get_promo_codes, delete_promo_code, deactivate_promo_code, get_user_by_tg_id, update_user_coins, update_promo_code
from utils.helpers import get_user_language
import datetime
import logging
from aiogram.utils.exceptions import MessageNotModified

logger = logging.getLogger(__name__)

class AdminStates(StatesGroup):
    waiting_for_user_id = State()
    waiting_for_duration = State()
    waiting_for_price = State()
    
    # –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Å–ø–æ–Ω—Å–æ—Ä–æ–≤
    waiting_for_sponsor_name = State()
    waiting_for_sponsor_link = State()
    waiting_for_sponsor_channel_id = State()
    waiting_for_sponsor_reward = State()
    editing_sponsor = State()
    
    # –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤
    waiting_for_promo_code = State()
    waiting_for_promo_duration = State()
    waiting_for_promo_uses = State()
    waiting_for_promo_expiry = State()

class AdminGiveCrystalsStates(StatesGroup):
    waiting_for_user_id = State()
    waiting_for_amount = State()

async def cmd_admin_panel(message: types.Message, locale):
    if message.from_user.id not in ADMIN_IDS:
        return
    
    user_locale = get_user_language(message.from_user.id)
    text = user_locale.get("admin_panel_text", "üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
    await message.answer(text, reply_markup=admin_panel_keyboard(user_locale))

async def process_give_crystals(callback: types.CallbackQuery, state: FSMContext, locale):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –≤—ã–¥–∞—á–∏ –º–æ–Ω–µ—Ç"""
    if callback.from_user.id not in ADMIN_IDS:
        await callback.answer("‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏", show_alert=True)
        return

    user_locale = get_user_language(callback.from_user.id)
    await callback.answer()
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–º–µ–Ω—ã
    kb = types.InlineKeyboardMarkup()
    kb.add(types.InlineKeyboardButton(text=user_locale.get("button_cancel", "üîô –û—Ç–º–µ–Ω–∞"), callback_data="back_to_admin"))
    
    await state.set_state(AdminGiveCrystalsStates.waiting_for_user_id)
    await callback.message.answer(user_locale["admin_enter_user_id"], reply_markup=kb)

async def process_user_id_for_crystals(message: types.Message, state: FSMContext, locale):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –≤—ã–¥–∞—á–∏ –º–æ–Ω–µ—Ç"""
    if message.from_user.id not in ADMIN_IDS:
        return

    user_locale = get_user_language(message.from_user.id)
    
    try:
        user_id = int(message.text)
        user = get_user_by_tg_id(user_id)
        
        if not user:
            await message.answer(user_locale["admin_user_not_found"].format(user_id=user_id))
            return
            
        await state.update_data(target_user_id=user_id)
        await state.set_state(AdminGiveCrystalsStates.waiting_for_amount)
        await message.answer(user_locale["admin_enter_crystals_amount"])
        
    except ValueError:
        await message.answer(user_locale["error_invalid_recipient"])

async def process_crystals_amount(message: types.Message, state: FSMContext, locale):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –º–æ–Ω–µ—Ç"""
    if message.from_user.id not in ADMIN_IDS:
        return

    user_locale = get_user_language(message.from_user.id)
    
    try:
        amount = int(message.text)
        if amount <= 0:
            await message.answer(user_locale["admin_invalid_amount"])
            return
            
        data = await state.get_data()
        target_user_id = data.get("target_user_id")
        
        if update_user_coins(target_user_id, amount):
            await message.answer(user_locale["admin_crystals_given"].format(
                user_id=target_user_id,
                amount=amount
            ))
        else:
            await message.answer(user_locale["admin_user_not_found"].format(user_id=target_user_id))
            
        await state.finish()
        await message.answer(
            user_locale.get("admin_panel_text", "üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"),
            reply_markup=admin_panel_keyboard(user_locale)
        )
        
    except ValueError:
        await message.answer(user_locale["admin_invalid_amount"])

async def process_give_premium(callback: types.CallbackQuery, state: FSMContext, locale):
    if callback.from_user.id not in ADMIN_IDS:
        await callback.answer("‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏", show_alert=True)
        return
    
    user_locale = get_user_language(callback.from_user.id)
    await callback.answer()
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–º–µ–Ω—ã
    kb = types.InlineKeyboardMarkup()
    kb.add(types.InlineKeyboardButton(text=user_locale.get("button_cancel", "üîô –û—Ç–º–µ–Ω–∞"), callback_data="back_to_admin"))
    
    await callback.message.edit_text(
        user_locale.get("enter_user_id", "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—Ç–∏—Ç–µ –≤—ã–¥–∞—Ç—å –ø—Ä–µ–º–∏—É–º:"),
        reply_markup=kb
    )
    await AdminStates.waiting_for_user_id.set()

async def process_user_id_input(message: types.Message, state: FSMContext, locale):
    if message.from_user.id not in ADMIN_IDS:
        return
    
    user_locale = get_user_language(message.from_user.id)
    
    if not message.text.isdigit():
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–º–µ–Ω—ã
        kb = types.InlineKeyboardMarkup()
        kb.add(types.InlineKeyboardButton(text=user_locale.get("button_cancel", "üîô –û—Ç–º–µ–Ω–∞"), callback_data="back_to_admin"))
        
        await message.answer(
            user_locale.get("invalid_user_id", "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã)"),
            reply_markup=kb
        )
        return
    
    await state.update_data(user_id=int(message.text))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã –∫ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ —Å –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—è–º–∏
    kb = admin_premium_duration_keyboard(user_locale)
    kb.add(types.InlineKeyboardButton(text=user_locale.get("button_cancel", "üîô –û—Ç–º–µ–Ω–∞"), callback_data="back_to_admin"))
    
    await message.answer(
        user_locale.get("select_premium_duration", "–í—ã–±–µ—Ä–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø—Ä–µ–º–∏—É–º–∞:"),
        reply_markup=kb
    )
    await AdminStates.waiting_for_duration.set()

async def process_premium_duration(callback: types.CallbackQuery, state: FSMContext, locale):
    if callback.from_user.id not in ADMIN_IDS:
        await callback.answer("‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏", show_alert=True)
        return

    user_locale = get_user_language(callback.from_user.id)
    duration_mapping = {
        "premium_1month": 30,
        "premium_6months": 180,
        "premium_1year": 365,
        "premium_forever": 36500  # 100 –ª–µ—Ç
    }
    
    duration_days = duration_mapping.get(callback.data)
    if not duration_days:
        await callback.answer(user_locale.get("invalid_duration", "‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å"), show_alert=True)
        return

    data = await state.get_data()
    user_id = data.get('user_id')
    
    if not user_id:
        await callback.answer(user_locale.get("user_id_not_found", "‚ùå –û—à–∏–±–∫–∞: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω"), show_alert=True)
        return

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø—Ä–µ–º–∏—É–º–∞
    end_date = datetime.datetime.now() + datetime.timedelta(days=duration_days)
    
    try:
        update_user_premium(user_id, end_date)
        await callback.answer(user_locale.get("premium_success", "‚úÖ –ü—Ä–µ–º–∏—É–º —É—Å–ø–µ—à–Ω–æ –≤—ã–¥–∞–Ω!"), show_alert=True)
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥"
        kb = types.InlineKeyboardMarkup()
        kb.add(types.InlineKeyboardButton(text=user_locale.get("back_to_admin_panel", "üîô –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"), callback_data="back_to_admin"))
        
        await callback.message.edit_text(
            user_locale.get("premium_given", "‚úÖ –ü—Ä–µ–º–∏—É–º –≤—ã–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}\n–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {days} –¥–Ω–µ–π\n–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è: {date}").format(
                user_id=user_id,
                days=duration_days,
                date=end_date.strftime('%d.%m.%Y')
            ),
            reply_markup=kb
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–¥–∞—á–µ –ø—Ä–µ–º–∏—É–º–∞: {str(e)}")
        await callback.answer(user_locale.get("premium_error", "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–¥–∞—á–µ –ø—Ä–µ–º–∏—É–º–∞"), show_alert=True)
    
    await state.finish()

async def process_back_to_admin(callback: types.CallbackQuery, state: FSMContext, locale):
    if callback.from_user.id not in ADMIN_IDS:
        await callback.answer("‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏", show_alert=True)
        return
    
    user_locale = get_user_language(callback.from_user.id)
    await state.finish()
    await callback.answer()
    
    try:
        if callback.data == "back_to_admin":
            text = user_locale.get("admin_panel_text", "üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
            await callback.message.edit_text(text, reply_markup=admin_panel_keyboard(user_locale))
        elif callback.data == "manage_promo_codes":
            # –£–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –æ—à–∏–±–∫–∏ MessageNotModified
            await callback.message.delete()
            await process_manage_promo_codes(callback, state, locale)
        elif callback.data == "manage_sponsors":
            # –£–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –æ—à–∏–±–∫–∏ MessageNotModified
            await callback.message.delete()
            await process_manage_sponsors(callback, state, locale)
    except MessageNotModified:
        await callback.answer(user_locale.get("no_changes", "–ò–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ—Ç"), show_alert=True)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å: {str(e)}")
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        text = user_locale.get("admin_panel_text", "üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
        await callback.message.answer(text, reply_markup=admin_panel_keyboard(user_locale))

async def process_admin_prices(callback: types.CallbackQuery, state: FSMContext, locale):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ü–µ–Ω–∞–º–∏ –ø—Ä–µ–º–∏—É–º–∞"""
    if callback.from_user.id not in ADMIN_IDS:
        await callback.answer("‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏", show_alert=True)
        return
    
    user_locale = get_user_language(callback.from_user.id)
    await callback.answer()
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Ü–µ–Ω—ã
        prices = get_premium_prices()
        prices_dict = {}
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ü–µ–Ω—ã –≤ —Å–ª–æ–≤–∞—Ä—å
        duration_mapping = {
            30: "month",
            180: "half_year",
            365: "year",
            36500: "forever"
        }
        
        for price_obj in prices:
            try:
                duration_type = duration_mapping.get(price_obj.duration_days)
                if duration_type:
                    prices_dict[duration_type] = price_obj.price
            except AttributeError as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞—Ç—Ä–∏–±—É—Ç–æ–≤ —Ü–µ–Ω—ã: {str(e)}")
                continue
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ü–µ–Ω–∞–º–∏
        kb = types.InlineKeyboardMarkup(row_width=1)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω
        kb.add(
            types.InlineKeyboardButton(
                text=f"üí∞ –ú–µ—Å—è—Ü ({prices_dict.get('month', '500')}‚ÇΩ)", 
                callback_data="change_price:month"
            ),
            types.InlineKeyboardButton(
                text=f"üí∞ –ü–æ–ª–≥–æ–¥–∞ ({prices_dict.get('half_year', '2500')}‚ÇΩ)", 
                callback_data="change_price:half_year"
            ),
            types.InlineKeyboardButton(
                text=f"üí∞ –ì–æ–¥ ({prices_dict.get('year', '4500')}‚ÇΩ)", 
                callback_data="change_price:year"
            ),
            types.InlineKeyboardButton(
                text=f"üí∞ –ù–∞–≤—Å–µ–≥–¥–∞ ({prices_dict.get('forever', '9900')}‚ÇΩ)", 
                callback_data="change_price:forever"
            )
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞
        kb.add(types.InlineKeyboardButton(
            text=user_locale.get("back_to_admin_panel", "üîô –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"),
            callback_data="back_to_admin"
        ))
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å —Ç–µ–∫—É—â–∏–º–∏ —Ü–µ–Ω–∞–º–∏
        text = "üíµ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω–∞–º–∏\n\n"
        text += f"–¢–µ–∫—É—â–∏–µ —Ü–µ–Ω—ã:\n"
        text += f"‚Ä¢ –ú–µ—Å—è—Ü: {prices_dict.get('month', '500')}‚ÇΩ\n"
        text += f"‚Ä¢ –ü–æ–ª–≥–æ–¥–∞: {prices_dict.get('half_year', '2500')}‚ÇΩ\n"
        text += f"‚Ä¢ –ì–æ–¥: {prices_dict.get('year', '4500')}‚ÇΩ\n"
        text += f"‚Ä¢ –ù–∞–≤—Å–µ–≥–¥–∞: {prices_dict.get('forever', '9900')}‚ÇΩ\n\n"
        text += "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É —Å —Ü–µ–Ω–æ–π, —á—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å –µ—ë"
        
        # –£–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
        await callback.message.edit_text(text, reply_markup=kb)
        
    except MessageNotModified:
        await callback.answer(user_locale.get("no_changes", "–ò–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ—Ç"), show_alert=True)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ —Ü–µ–Ω–∞–º–∏: {str(e)}")
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        kb = types.InlineKeyboardMarkup()
        kb.add(types.InlineKeyboardButton(
            text=user_locale.get("back_to_admin_panel", "üîô –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"),
            callback_data="back_to_admin"
        ))
        await callback.message.answer(
            user_locale.get("error_loading_prices", "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ü–µ–Ω"),
            reply_markup=kb
        )

async def process_change_price(callback: types.CallbackQuery, state: FSMContext, locale):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ü–µ–Ω—ã"""
    if callback.from_user.id not in ADMIN_IDS:
        await callback.answer("‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏", show_alert=True)
        return
    
    user_locale = get_user_language(callback.from_user.id)
    await callback.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏ –∏–∑ callback data
    duration_type = callback.data.split(":")[1]
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(duration_type=duration_type)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∏–ø–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    duration_name_mapping = {
        "month": "–º–µ—Å—è—Ü",
        "half_year": "–ø–æ–ª–≥–æ–¥–∞",
        "year": "–≥–æ–¥",
        "forever": "–Ω–∞–≤—Å–µ–≥–¥–∞"
    }
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞
    duration_days_mapping = {
        "month": 30,
        "half_year": 180,
        "year": 365,
        "forever": 36500
    }
    
    duration_name = duration_name_mapping.get(duration_type, duration_type)
    duration_days = duration_days_mapping.get(duration_type)
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É
    prices = get_premium_prices()
    current_price = None
    for price in prices:
        if price.duration_days == duration_days:
            current_price = price.price
            break
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–º–µ–Ω—ã
    kb = types.InlineKeyboardMarkup()
    kb.add(types.InlineKeyboardButton(text=user_locale.get("button_cancel", "üîô –û—Ç–º–µ–Ω–∞"), callback_data="premium_prices"))
    
    text = f"üíµ –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã –¥–ª—è –ø–µ—Ä–∏–æ–¥–∞: {duration_name}\n"
    if current_price is not None:
        text += f"–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {current_price}‚ÇΩ\n"
    text += "\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ):"
    
    await callback.message.edit_text(text, reply_markup=kb)
    await AdminStates.waiting_for_price.set()

async def process_price_input(message: types.Message, state: FSMContext, locale):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–π —Ü–µ–Ω—ã"""
    if message.from_user.id not in ADMIN_IDS:
        return
    
    user_locale = get_user_language(message.from_user.id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–≤–µ–¥–µ–Ω–æ —á–∏—Å–ª–æ
    if not message.text.isdigit() or int(message.text) <= 0:
        kb = types.InlineKeyboardMarkup()
        kb.add(types.InlineKeyboardButton(text=user_locale.get("button_cancel", "üîô –û—Ç–º–µ–Ω–∞"), callback_data="premium_prices"))
        
        await message.answer(
            user_locale.get("admin_invalid_price", "‚ùå –¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"),
            reply_markup=kb
        )
        return
    
    new_price = int(message.text)
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    duration_type = data.get("duration_type")
    
    if not duration_type:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: —Ç–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        await state.finish()
        return
    
    # –ú–∞–ø–ø–∏–Ω–≥ —Ç–∏–ø–æ–≤ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π
    duration_days_mapping = {
        "month": 30,
        "half_year": 180,
        "year": 365,
        "forever": 36500
    }
    
    duration_days = duration_days_mapping.get(duration_type)
    if not duration_days:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏")
        await state.finish()
        return
    
    try:
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–Ω—É
        update_premium_price(duration_days, new_price)
        await message.answer(user_locale.get("admin_price_updated", "‚úÖ –¶–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞"))
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é —Ü–µ–Ω–∞–º–∏
        await process_admin_prices(
            types.CallbackQuery(
                id="temp",
                from_user=message.from_user,
                chat_instance="temp",
                message=message,
                data="premium_prices"
            ),
            state,
            locale
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ü–µ–Ω—ã: {str(e)}")
        await message.answer(user_locale.get("admin_price_error", "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ü–µ–Ω—ã"))
    
    await state.finish()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Å–ø–æ–Ω—Å–æ—Ä–æ–≤
async def process_manage_sponsors(callback: types.CallbackQuery, state: FSMContext, locale):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–ø–æ–Ω—Å–æ—Ä–∞–º–∏"""
    if callback.from_user.id not in ADMIN_IDS:
        await callback.answer("‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏", show_alert=True)
        return
    
    user_locale = get_user_language(callback.from_user.id)
    await callback.answer()
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–ø–æ–Ω—Å–æ—Ä–æ–≤
        sponsors = get_sponsors(is_active_only=False)
        
        # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        kb = types.InlineKeyboardMarkup()
        kb.add(types.InlineKeyboardButton(text=user_locale.get("button_add_sponsor", "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–ø–æ–Ω—Å–æ—Ä–∞"), callback_data="add_sponsor"))
        kb.add(types.InlineKeyboardButton(text=user_locale.get("back_to_admin_panel", "üîô –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"), callback_data="back_to_admin"))
        
        if not sponsors:
            text = f"{user_locale['admin_sponsors_title']}\n\n{user_locale['no_sponsors']}"
            await callback.message.answer(text, reply_markup=kb)
            return
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å–æ —Å–ø–∏—Å–∫–æ–º —Å–ø–æ–Ω—Å–æ—Ä–æ–≤
        text = f"{user_locale['admin_sponsors_title']}\n\n{user_locale['admin_sponsors_list']}"
        await callback.message.answer(text, reply_markup=kb)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–ø–æ–Ω—Å–æ—Ä–∞
        for i, sponsor in enumerate(sponsors, 1):
            status = user_locale["admin_sponsor_active"] if sponsor.is_active else user_locale["admin_sponsor_inactive"]
            sponsor_text = f"{i}. {user_locale['admin_sponsor_item'].format(name=sponsor.name, link=sponsor.link, reward=sponsor.reward, status=status)}"
            keyboard = admin_sponsor_item_keyboard(user_locale, sponsor.id)
            await callback.message.answer(sponsor_text, reply_markup=keyboard)
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Å–ø–æ–Ω—Å–æ—Ä–æ–≤: {str(e)}")
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        kb = types.InlineKeyboardMarkup()
        kb.add(types.InlineKeyboardButton(text=user_locale.get("back_to_admin_panel", "üîô –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"), callback_data="back_to_admin"))
        await callback.message.answer(
            user_locale.get("error_loading_sponsors", "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞ —Å–ø–æ–Ω—Å–æ—Ä–æ–≤"),
            reply_markup=kb
        )

async def process_add_sponsor(callback: types.CallbackQuery, state: FSMContext, locale):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–ø–æ–Ω—Å–æ—Ä–∞"""
    if callback.from_user.id not in ADMIN_IDS:
        await callback.answer("‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏", show_alert=True)
        return
    
    user_locale = get_user_language(callback.from_user.id)
    await callback.answer()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
    kb = types.InlineKeyboardMarkup()
    kb.add(types.InlineKeyboardButton(text=user_locale.get("back_to_admin_panel", "üîô –ù–∞–∑–∞–¥"), callback_data="manage_sponsors"))
    
    await callback.message.edit_text(
        f"{user_locale['admin_add_sponsor_title']}\n\n{user_locale['admin_add_sponsor_name']}",
        reply_markup=kb
    )
    await AdminStates.waiting_for_sponsor_name.set()

async def process_sponsor_name_input(message: types.Message, state: FSMContext, locale):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ —Å–ø–æ–Ω—Å–æ—Ä–∞"""
    if message.from_user.id not in ADMIN_IDS:
        return
    
    user_locale = get_user_language(message.from_user.id)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è —Å–ø–æ–Ω—Å–æ—Ä–∞
    await state.update_data(sponsor_name=message.text)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
    kb = types.InlineKeyboardMarkup()
    kb.add(types.InlineKeyboardButton(text=user_locale.get("back_to_admin_panel", "üîô –ù–∞–∑–∞–¥"), callback_data="manage_sponsors"))
    
    await message.answer(user_locale["admin_add_sponsor_link"], reply_markup=kb)
    await AdminStates.waiting_for_sponsor_link.set()

async def process_sponsor_link_input(message: types.Message, state: FSMContext, locale):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Å—Å—ã–ª–∫–∏ –Ω–∞ —Å–ø–æ–Ω—Å–æ—Ä–∞"""
    if message.from_user.id not in ADMIN_IDS:
        return
    
    user_locale = get_user_language(message.from_user.id)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Å–ø–æ–Ω—Å–æ—Ä–∞
    await state.update_data(sponsor_link=message.text)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
    kb = types.InlineKeyboardMarkup()
    kb.add(types.InlineKeyboardButton(text=user_locale.get("back_to_admin_panel", "üîô –ù–∞–∑–∞–¥"), callback_data="manage_sponsors"))
    
    await message.answer(user_locale["admin_add_sponsor_channel_id"], reply_markup=kb)
    await AdminStates.waiting_for_sponsor_channel_id.set()

async def process_sponsor_channel_id_input(message: types.Message, state: FSMContext, locale):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ ID –∫–∞–Ω–∞–ª–∞ —Å–ø–æ–Ω—Å–æ—Ä–∞"""
    if message.from_user.id not in ADMIN_IDS:
        return
    
    user_locale = get_user_language(message.from_user.id)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∫–∞–Ω–∞–ª–∞, –µ—Å–ª–∏ –±—ã–ª –≤–≤–µ–¥–µ–Ω (–º–æ–∂–µ—Ç –±—ã—Ç—å '-' –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞)
    channel_id = None if message.text == '-' else message.text
    await state.update_data(sponsor_channel_id=channel_id)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
    kb = types.InlineKeyboardMarkup()
    kb.add(types.InlineKeyboardButton(text=user_locale.get("back_to_admin_panel", "üîô –ù–∞–∑–∞–¥"), callback_data="manage_sponsors"))
    
    await message.answer(user_locale["admin_add_sponsor_reward"], reply_markup=kb)
    await AdminStates.waiting_for_sponsor_reward.set()

async def process_sponsor_reward_input(message: types.Message, state: FSMContext, locale):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –Ω–∞–≥—Ä–∞–¥—ã –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ —Å–ø–æ–Ω—Å–æ—Ä–∞"""
    if message.from_user.id not in ADMIN_IDS:
        return
    
    user_locale = get_user_language(message.from_user.id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–≤–µ–¥–µ–Ω–æ —á–∏—Å–ª–æ
    if not message.text.isdigit():
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞–≥—Ä–∞–¥—ã")
        return
    
    reward = int(message.text)
    
    # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–Ω–µ–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    data = await state.get_data()
    name = data.get("sponsor_name")
    link = data.get("sponsor_link")
    channel_id = data.get("sponsor_channel_id")
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–æ–Ω—Å–æ—Ä–∞
    try:
        add_sponsor(name, link, reward, channel_id)
        await message.answer(user_locale["admin_sponsor_added"])
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å–ø–æ–Ω—Å–æ—Ä–æ–≤
        sponsors = get_sponsors(is_active_only=False)
        
        if not sponsors:
            text = f"{user_locale['admin_sponsors_title']}\n\n{user_locale['no_sponsors']}"
        else:
            text = f"{user_locale['admin_sponsors_title']}\n\n{user_locale['admin_sponsors_list']}"
            for sponsor in sponsors:
                status = user_locale["admin_sponsor_active"] if sponsor.is_active else user_locale["admin_sponsor_inactive"]
                text += f"\n‚Ä¢ {user_locale['admin_sponsor_item'].format(name=sponsor.name, link=sponsor.link, reward=sponsor.reward, status=status)}"
        
        await message.answer(text, reply_markup=admin_sponsors_keyboard(user_locale))
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å–ø–æ–Ω—Å–æ—Ä–∞: {str(e)}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å–ø–æ–Ω—Å–æ—Ä–∞: {str(e)}")
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.finish()

async def process_toggle_sponsor(callback: types.CallbackQuery, state: FSMContext, locale):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Å–ø–æ–Ω—Å–æ—Ä–∞"""
    if callback.from_user.id not in ADMIN_IDS:
        await callback.answer("‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏", show_alert=True)
        return
    
    user_locale = get_user_language(callback.from_user.id)
    
    # –ü–æ–ª—É—á–∞–µ–º ID —Å–ø–æ–Ω—Å–æ—Ä–∞ –∏–∑ callback_data
    sponsor_id = int(callback.data.split(":")[1])
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–æ–Ω—Å–æ—Ä–∞
    sponsors = get_sponsors(is_active_only=False)
    sponsor = next((s for s in sponsors if s.id == sponsor_id), None)
    
    if not sponsor:
        await callback.answer(user_locale["sponsor_not_found"], show_alert=True)
        return
    
    # –ò–∑–º–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–ø–æ–Ω—Å–æ—Ä–∞
    try:
        update_sponsor(sponsor_id, is_active=not sponsor.is_active)
        await callback.answer(user_locale["admin_sponsor_toggle"], show_alert=True)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        status = user_locale["admin_sponsor_inactive"] if sponsor.is_active else user_locale["admin_sponsor_active"]
        text = user_locale["admin_sponsor_item"].format(name=sponsor.name, link=sponsor.link, reward=sponsor.reward, status=status)
        await callback.message.edit_text(text, reply_markup=admin_sponsor_item_keyboard(user_locale, sponsor_id))
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ —Å–ø–æ–Ω—Å–æ—Ä–∞: {str(e)}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ —Å–ø–æ–Ω—Å–æ—Ä–∞", show_alert=True)

async def process_delete_sponsor_confirm(callback: types.CallbackQuery, state: FSMContext, locale):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è —Å–ø–æ–Ω—Å–æ—Ä–∞"""
    if callback.from_user.id not in ADMIN_IDS:
        await callback.answer("‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏", show_alert=True)
        return
    
    user_locale = get_user_language(callback.from_user.id)
    
    # –ü–æ–ª—É—á–∞–µ–º ID —Å–ø–æ–Ω—Å–æ—Ä–∞ –∏–∑ callback_data
    sponsor_id = int(callback.data.split(":")[1])
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    await callback.message.edit_text(
        user_locale["admin_confirm_delete_sponsor"],
        reply_markup=admin_sponsor_confirm_delete_keyboard(user_locale, sponsor_id)
    )

async def process_confirm_delete_sponsor(callback: types.CallbackQuery, state: FSMContext, locale):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–ø–æ–Ω—Å–æ—Ä–∞"""
    if callback.from_user.id not in ADMIN_IDS:
        await callback.answer("‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏", show_alert=True)
        return
    
    user_locale = get_user_language(callback.from_user.id)
    
    # –ü–æ–ª—É—á–∞–µ–º ID —Å–ø–æ–Ω—Å–æ—Ä–∞ –∏–∑ callback_data
    sponsor_id = int(callback.data.split(":")[1])
    
    # –£–¥–∞–ª—è–µ–º —Å–ø–æ–Ω—Å–æ—Ä–∞
    try:
        delete_sponsor(sponsor_id)
        await callback.answer(user_locale["admin_sponsor_deleted"], show_alert=True)
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É —Å–ø–æ–Ω—Å–æ—Ä–æ–≤
        await process_manage_sponsors(callback, state, locale)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–ø–æ–Ω—Å–æ—Ä–∞: {str(e)}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–ø–æ–Ω—Å–æ—Ä–∞", show_alert=True)

async def process_cancel_delete_sponsor(callback: types.CallbackQuery, state: FSMContext, locale):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–º–µ–Ω—ã —É–¥–∞–ª–µ–Ω–∏—è —Å–ø–æ–Ω—Å–æ—Ä–∞"""
    if callback.from_user.id not in ADMIN_IDS:
        await callback.answer("‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏", show_alert=True)
        return
    
    user_locale = get_user_language(callback.from_user.id)
    
    # –ü–æ–ª—É—á–∞–µ–º ID —Å–ø–æ–Ω—Å–æ—Ä–∞ –∏–∑ callback_data
    sponsor_id = int(callback.data.split(":")[1])
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–æ–Ω—Å–æ—Ä–∞
    sponsors = get_sponsors(is_active_only=False)
    sponsor = next((s for s in sponsors if s.id == sponsor_id), None)
    
    if sponsor:
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É —Å–ø–æ–Ω—Å–æ—Ä–∞
        status = user_locale["admin_sponsor_active"] if sponsor.is_active else user_locale["admin_sponsor_inactive"]
        text = user_locale["admin_sponsor_item"].format(name=sponsor.name, link=sponsor.link, reward=sponsor.reward, status=status)
        await callback.message.edit_text(text, reply_markup=admin_sponsor_item_keyboard(user_locale, sponsor_id))
    else:
        # –ï—Å–ª–∏ —Å–ø–æ–Ω—Å–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É —Å–ø–æ–Ω—Å–æ—Ä–æ–≤
        await process_manage_sponsors(callback, state, locale)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤

async def process_manage_promo_codes(callback: types.CallbackQuery, state: FSMContext, locale):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞–º–∏"""
    if callback.from_user.id not in ADMIN_IDS:
        await callback.answer("‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏", show_alert=True)
        return
    
    user_locale = get_user_language(callback.from_user.id)
    await callback.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤
    promo_codes = get_promo_codes(include_inactive=True)
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    kb = types.InlineKeyboardMarkup(row_width=1)
    kb.add(types.InlineKeyboardButton(text=user_locale.get("button_add_promo", "‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥"), callback_data="add_promo_code"))
    kb.add(types.InlineKeyboardButton(text=user_locale.get("back_to_admin_panel", "üîô –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"), callback_data="back_to_admin"))
    
    if not promo_codes:
        text = user_locale.get("admin_promo_title", "üéüÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞–º–∏") + "\n\n" + user_locale.get("no_promo_codes", "–ü—Ä–æ–º–æ–∫–æ–¥—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        try:
            await callback.message.edit_text(text, reply_markup=kb)
        except MessageNotModified:
            await callback.answer(user_locale.get("no_changes", "–ò–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ—Ç"), show_alert=True)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}")
            await callback.message.answer(text, reply_markup=kb)
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ —Å–ø–∏—Å–∫–æ–º –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤
    text = user_locale.get("admin_promo_title", "üéüÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞–º–∏") + "\n\n" + user_locale.get("admin_promo_list", "–°–ø–∏—Å–æ–∫ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤:")
    
    try:
        # –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º
        try:
            await callback.message.edit_text(text, reply_markup=kb, parse_mode="HTML")
        except MessageNotModified:
            await callback.answer(user_locale.get("no_changes", "–ò–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ—Ç"), show_alert=True)
            return
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}")
            await callback.message.answer(text, reply_markup=kb, parse_mode="HTML")
        
        # –ó–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–æ–º–æ–∫–æ–¥–∞
        for i, promo in enumerate(promo_codes, 1):
            status = user_locale.get("active", "‚úì –ê–∫—Ç–∏–≤–µ–Ω") if promo.is_active else user_locale.get("inactive", "‚úó –ù–µ–∞–∫—Ç–∏–≤–µ–Ω")
            
            if promo.expires_at:
                expiry_date = promo.expires_at.strftime("%d.%m.%Y")
                expiry_text = user_locale.get("promo_expires", "–¥–æ {date}").format(date=expiry_date)
            else:
                expiry_text = user_locale.get("promo_no_expiry", "–±–µ—Å—Å—Ä–æ—á–Ω–æ")
            
            promo_text = f"{i}. <code>{promo.code}</code> ({promo.duration_days} –¥–Ω., {expiry_text}) - {status} [{promo.uses_count}/{promo.max_uses}]"
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–æ–º–æ–∫–æ–¥–∞
            promo_kb = types.InlineKeyboardMarkup(row_width=2)
            
            if promo.is_active:
                promo_kb.insert(types.InlineKeyboardButton(
                    text=user_locale.get("button_deactivate_promo", "üö´ –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å"), 
                    callback_data=f"deactivate_promo:{promo.id}"
                ))
            else:
                promo_kb.insert(types.InlineKeyboardButton(
                    text=user_locale.get("button_activate_promo", "‚úÖ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å"), 
                    callback_data=f"activate_promo:{promo.id}"
                ))
            
            promo_kb.insert(types.InlineKeyboardButton(
                text=user_locale.get("button_delete_promo", "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å"), 
                callback_data=f"delete_promo:{promo.id}"
            ))
            
            await callback.message.answer(promo_text, reply_markup=promo_kb, parse_mode="HTML")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤: {str(e)}")
        await callback.message.answer(
            user_locale.get("error_loading_promo_codes", "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤"),
            reply_markup=kb
        )

async def process_add_promo_code(callback: types.CallbackQuery, state: FSMContext, locale):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–º–æ–∫–æ–¥–∞"""
    if callback.from_user.id not in ADMIN_IDS:
        await callback.answer("‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏", show_alert=True)
        return
    
    user_locale = get_user_language(callback.from_user.id)
    await callback.answer()
    
    kb = types.InlineKeyboardMarkup()
    kb.add(types.InlineKeyboardButton(text=user_locale.get("button_cancel", "üîô –û—Ç–º–µ–Ω–∞"), callback_data="manage_promo_codes"))
    
    await callback.message.edit_text(
        user_locale.get("admin_add_promo_code", "üéüÔ∏è –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–º–æ–∫–æ–¥–∞") + 
        "\n\n" + 
        user_locale.get("admin_enter_promo_code", "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –ø—Ä–æ–º–æ–∫–æ–¥–∞ (—Ç–æ–ª—å–∫–æ –ª–∞—Ç–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã –∏ —Ü–∏—Ñ—Ä—ã):"),
        reply_markup=kb
    )
    
    await AdminStates.waiting_for_promo_code.set()

async def process_promo_code_input(message: types.Message, state: FSMContext, locale):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞ –ø—Ä–æ–º–æ–∫–æ–¥–∞"""
    if message.from_user.id not in ADMIN_IDS:
        return
    
    user_locale = get_user_language(message.from_user.id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–æ–º–æ–∫–æ–¥ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π (—Ç–æ–ª—å–∫–æ –ª–∞—Ç–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã –∏ —Ü–∏—Ñ—Ä—ã)
    promo_code = message.text.strip().upper()
    if not promo_code.isalnum():
        kb = types.InlineKeyboardMarkup()
        kb.add(types.InlineKeyboardButton(text=user_locale.get("button_cancel", "üîô –û—Ç–º–µ–Ω–∞"), callback_data="manage_promo_codes"))
        
        await message.answer(
            user_locale.get("admin_invalid_promo_code", "‚ùå –ü—Ä–æ–º–æ–∫–æ–¥ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –ª–∞—Ç–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã –∏ —Ü–∏—Ñ—Ä—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"),
            reply_markup=kb
        )
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–º–æ–∫–æ–¥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(promo_code=promo_code)
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –ø—Ä–µ–º–∏—É–º–∞
    kb = types.InlineKeyboardMarkup(row_width=2)
    kb.add(
        types.InlineKeyboardButton(text="7 –¥–Ω–µ–π", callback_data="promo_duration:7"),
        types.InlineKeyboardButton(text="30 –¥–Ω–µ–π", callback_data="promo_duration:30"),
        types.InlineKeyboardButton(text="90 –¥–Ω–µ–π", callback_data="promo_duration:90"),
        types.InlineKeyboardButton(text="365 –¥–Ω–µ–π", callback_data="promo_duration:365")
    )
    kb.add(types.InlineKeyboardButton(text=user_locale.get("button_custom", "–î—Ä—É–≥–æ–π —Å—Ä–æ–∫"), callback_data="promo_duration:custom"))
    kb.add(types.InlineKeyboardButton(text=user_locale.get("button_cancel", "üîô –û—Ç–º–µ–Ω–∞"), callback_data="manage_promo_codes"))
    
    await message.answer(
        user_locale.get("admin_enter_promo_duration", "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –ø—Ä–µ–º–∏—É–º–∞ –ø–æ –ø—Ä–æ–º–æ–∫–æ–¥—É:"),
        reply_markup=kb
    )
    
    await AdminStates.waiting_for_promo_duration.set()

async def process_promo_duration_selection(callback: types.CallbackQuery, state: FSMContext, locale):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Å—Ä–æ–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞"""
    if callback.from_user.id not in ADMIN_IDS:
        await callback.answer("‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏", show_alert=True)
        return
    
    user_locale = get_user_language(callback.from_user.id)
    await callback.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Å—Ä–æ–∫
    duration_str = callback.data.split(":")[1]
    
    if duration_str == "custom":
        kb = types.InlineKeyboardMarkup()
        kb.add(types.InlineKeyboardButton(text=user_locale.get("button_cancel", "üîô –û—Ç–º–µ–Ω–∞"), callback_data="manage_promo_codes"))
        
        await callback.message.edit_text(
            user_locale.get("admin_enter_custom_duration", "–í–≤–µ–¥–∏—Ç–µ —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞ –≤ –¥–Ω—è—Ö (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ):"),
            reply_markup=kb
        )
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(promo_duration=int(duration_str))
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π
    kb = types.InlineKeyboardMarkup(row_width=2)
    kb.add(
        types.InlineKeyboardButton(text="1 —Ä–∞–∑", callback_data="promo_uses:1"),
        types.InlineKeyboardButton(text="5 —Ä–∞–∑", callback_data="promo_uses:5"),
        types.InlineKeyboardButton(text="10 —Ä–∞–∑", callback_data="promo_uses:10"),
        types.InlineKeyboardButton(text="100 —Ä–∞–∑", callback_data="promo_uses:100")
    )
    kb.add(types.InlineKeyboardButton(text=user_locale.get("button_custom", "–î—Ä—É–≥–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ"), callback_data="promo_uses:custom"))
    kb.add(types.InlineKeyboardButton(text=user_locale.get("button_cancel", "üîô –û—Ç–º–µ–Ω–∞"), callback_data="manage_promo_codes"))
    
    await callback.message.edit_text(
        user_locale.get("admin_enter_promo_uses", "–í—ã–±–µ—Ä–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π –ø—Ä–æ–º–æ–∫–æ–¥–∞:"),
        reply_markup=kb
    )
    
    await AdminStates.waiting_for_promo_uses.set()

async def process_promo_uses_selection(callback: types.CallbackQuery, state: FSMContext, locale):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π –ø—Ä–æ–º–æ–∫–æ–¥–∞"""
    if callback.from_user.id not in ADMIN_IDS:
        await callback.answer("‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏", show_alert=True)
        return
    
    user_locale = get_user_language(callback.from_user.id)
    await callback.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π
    uses_str = callback.data.split(":")[1]
    
    if uses_str == "custom":
        kb = types.InlineKeyboardMarkup()
        kb.add(types.InlineKeyboardButton(text=user_locale.get("button_cancel", "üîô –û—Ç–º–µ–Ω–∞"), callback_data="manage_promo_codes"))
        
        await callback.message.edit_text(
            user_locale.get("admin_enter_custom_uses", "–í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π –ø—Ä–æ–º–æ–∫–æ–¥–∞ (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ):"),
            reply_markup=kb
        )
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(promo_uses=int(uses_str))
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è —Å–∞–º–æ–≥–æ –ø—Ä–æ–º–æ–∫–æ–¥–∞
    kb = types.InlineKeyboardMarkup()
    kb.add(types.InlineKeyboardButton(text=user_locale.get("button_no_expiry", "–ë–µ—Å—Å—Ä–æ—á–Ω–æ"), callback_data="promo_expiry:none"))
    kb.add(types.InlineKeyboardButton(text="7 –¥–Ω–µ–π", callback_data="promo_expiry:7"))
    kb.add(types.InlineKeyboardButton(text="30 –¥–Ω–µ–π", callback_data="promo_expiry:30"))
    kb.add(types.InlineKeyboardButton(text="90 –¥–Ω–µ–π", callback_data="promo_expiry:90"))
    kb.add(types.InlineKeyboardButton(text=user_locale.get("button_cancel", "üîô –û—Ç–º–µ–Ω–∞"), callback_data="manage_promo_codes"))
    
    await callback.message.edit_text(
        user_locale.get("admin_enter_promo_expiry", "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è —Å–∞–º–æ–≥–æ –ø—Ä–æ–º–æ–∫–æ–¥–∞ (—á–µ—Ä–µ–∑ —Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –æ–Ω —Å—Ç–∞–Ω–µ—Ç –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–º):"),
        reply_markup=kb
    )
    
    await AdminStates.waiting_for_promo_expiry.set()

async def process_promo_expiry_selection(callback: types.CallbackQuery, state: FSMContext, locale):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Å—Ä–æ–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è —Å–∞–º–æ–≥–æ –ø—Ä–æ–º–æ–∫–æ–¥–∞"""
    if callback.from_user.id not in ADMIN_IDS:
        await callback.answer("‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏", show_alert=True)
        return
    
    user_locale = get_user_language(callback.from_user.id)
    await callback.answer()
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()
        promo_code = data.get("promo_code")
        promo_duration = data.get("promo_duration")
        promo_uses = data.get("promo_uses")
        
        if not all([promo_code, promo_duration, promo_uses]):
            raise ValueError("–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞")
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞
        expiry_str = callback.data.split(":")[1]
        expiry_date = None
        
        if expiry_str != "none":
            days = int(expiry_str)
            expiry_date = datetime.datetime.now() + datetime.timedelta(days=days)
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–æ–∫–æ–¥
        promo = add_promo_code(promo_code, promo_duration, promo_uses, expiry_date)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞
        kb = types.InlineKeyboardMarkup()
        kb.add(types.InlineKeyboardButton(
            text=user_locale.get("back_to_promo_management", "üîô –ö —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –ø—Ä–æ–º–æ–∫–æ–¥–∞–º–∏"),
            callback_data="manage_promo_codes"
        ))
        
        if promo:
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è
            expiry_text = user_locale.get("promo_no_expiry", "–±–µ—Å—Å—Ä–æ—á–Ω–æ") if not expiry_date else expiry_date.strftime("%d.%m.%Y")
            success_text = [
                user_locale.get("admin_promo_created", "‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω:"),
                f"\n\n<code>{promo_code}</code>\n",
                user_locale.get("admin_promo_details", "–î–µ—Ç–∞–ª–∏:"),
                f"‚Ä¢ {user_locale.get('admin_promo_duration', '–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –ø—Ä–µ–º–∏—É–º–∞')}: {promo_duration} –¥–Ω–µ–π",
                f"‚Ä¢ {user_locale.get('admin_promo_uses', '–õ–∏–º–∏—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π')}: {promo_uses}",
                f"‚Ä¢ {user_locale.get('admin_promo_expiry', '–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞')}: {expiry_text}"
            ]
            await callback.message.edit_text(
                "\n".join(success_text),
                reply_markup=kb,
                parse_mode="HTML"
            )
        else:
            await callback.message.edit_text(
                user_locale.get("admin_promo_error", "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞. –í–æ–∑–º–æ–∂–Ω–æ, —Ç–∞–∫–æ–π –ø—Ä–æ–º–æ–∫–æ–¥ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç."),
                reply_markup=kb
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞: {str(e)}")
        kb = types.InlineKeyboardMarkup()
        kb.add(types.InlineKeyboardButton(
            text=user_locale.get("back_to_promo_management", "üîô –ö —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –ø—Ä–æ–º–æ–∫–æ–¥–∞–º–∏"),
            callback_data="manage_promo_codes"
        ))
        await callback.message.edit_text(
            user_locale.get("admin_promo_error", "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞: ") + str(e),
            reply_markup=kb
        )
    finally:
        await state.finish()

async def process_delete_promo(callback: types.CallbackQuery, state: FSMContext, locale):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞"""
    if callback.from_user.id not in ADMIN_IDS:
        await callback.answer("‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏", show_alert=True)
        return
    
    user_locale = get_user_language(callback.from_user.id)
    await callback.answer()
    
    try:
        promo_id = int(callback.data.split(":")[1])
        success = delete_promo_code(promo_id)
        
        kb = types.InlineKeyboardMarkup()
        kb.add(types.InlineKeyboardButton(
            text=user_locale.get("back_to_promo_management", "üîô –ö —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –ø—Ä–æ–º–æ–∫–æ–¥–∞–º–∏"),
            callback_data="manage_promo_codes"
        ))
        
        if success:
            text = user_locale.get("admin_promo_deleted", "‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω")
        else:
            text = user_locale.get("admin_promo_delete_error", "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞")
        
        await callback.message.edit_text(text, reply_markup=kb)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞: {str(e)}")
        kb = types.InlineKeyboardMarkup()
        kb.add(types.InlineKeyboardButton(
            text=user_locale.get("back_to_promo_management", "üîô –ö —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –ø—Ä–æ–º–æ–∫–æ–¥–∞–º–∏"),
            callback_data="manage_promo_codes"
        ))
        await callback.message.edit_text(
            user_locale.get("admin_promo_delete_error", "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞"),
            reply_markup=kb
        )

async def process_deactivate_promo(callback: types.CallbackQuery, state: FSMContext, locale):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞"""
    if callback.from_user.id not in ADMIN_IDS:
        await callback.answer("‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏", show_alert=True)
        return
    
    user_locale = get_user_language(callback.from_user.id)
    await callback.answer()
    
    try:
        promo_id = int(callback.data.split(":")[1])
        success = deactivate_promo_code(promo_id)
        
        kb = types.InlineKeyboardMarkup()
        kb.add(types.InlineKeyboardButton(
            text=user_locale.get("back_to_promo_management", "üîô –ö —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –ø—Ä–æ–º–æ–∫–æ–¥–∞–º–∏"),
            callback_data="manage_promo_codes"
        ))
        
        if success:
            text = user_locale.get("admin_promo_deactivated", "‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ —É—Å–ø–µ—à–Ω–æ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
        else:
            text = user_locale.get("admin_promo_deactivate_error", "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞")
        
        await callback.message.edit_text(text, reply_markup=kb)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞: {str(e)}")
        kb = types.InlineKeyboardMarkup()
        kb.add(types.InlineKeyboardButton(
            text=user_locale.get("back_to_promo_management", "üîô –ö —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –ø—Ä–æ–º–æ–∫–æ–¥–∞–º–∏"),
            callback_data="manage_promo_codes"
        ))
        await callback.message.edit_text(
            user_locale.get("admin_promo_deactivate_error", "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞"),
            reply_markup=kb
        )

# –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã –¥–ª—è –≤—Å–µ—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
async def process_cancel_premium(message: types.Message, state: FSMContext, locale):
    if message.from_user.id not in ADMIN_IDS:
        return
    
    if message.text.lower() in ["–æ—Ç–º–µ–Ω–∞", "üîô", "/cancel"]:
        user_locale = get_user_language(message.from_user.id)
        await state.finish()
        await message.answer(
            user_locale.get("admin_panel_text", "üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"),
            reply_markup=admin_panel_keyboard(user_locale)
        )

async def process_custom_duration_input(message: types.Message, state: FSMContext, locale):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–≥–æ —Å—Ä–æ–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞"""
    if message.from_user.id not in ADMIN_IDS:
        return
    
    user_locale = get_user_language(message.from_user.id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–≤–µ–¥–µ–Ω–æ —á–∏—Å–ª–æ
    if not message.text.isdigit() or int(message.text) <= 0:
        kb = types.InlineKeyboardMarkup()
        kb.add(types.InlineKeyboardButton(text=user_locale.get("button_cancel", "üîô –û—Ç–º–µ–Ω–∞"), callback_data="manage_promo_codes"))
        
        await message.answer(
            user_locale.get("admin_invalid_duration", "‚ùå –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"),
            reply_markup=kb
        )
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(promo_duration=int(message.text))
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π
    kb = types.InlineKeyboardMarkup(row_width=2)
    kb.add(
        types.InlineKeyboardButton(text="1 —Ä–∞–∑", callback_data="promo_uses:1"),
        types.InlineKeyboardButton(text="5 —Ä–∞–∑", callback_data="promo_uses:5"),
        types.InlineKeyboardButton(text="10 —Ä–∞–∑", callback_data="promo_uses:10"),
        types.InlineKeyboardButton(text="100 —Ä–∞–∑", callback_data="promo_uses:100")
    )
    kb.add(types.InlineKeyboardButton(text=user_locale.get("button_custom", "–î—Ä—É–≥–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ"), callback_data="promo_uses:custom"))
    kb.add(types.InlineKeyboardButton(text=user_locale.get("button_cancel", "üîô –û—Ç–º–µ–Ω–∞"), callback_data="manage_promo_codes"))
    
    await message.answer(
        user_locale.get("admin_enter_promo_uses", "–í—ã–±–µ—Ä–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π –ø—Ä–æ–º–æ–∫–æ–¥–∞:"),
        reply_markup=kb
    )
    
    await AdminStates.waiting_for_promo_uses.set()

async def process_custom_uses_input(message: types.Message, state: FSMContext, locale):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π –ø—Ä–æ–º–æ–∫–æ–¥–∞"""
    if message.from_user.id not in ADMIN_IDS:
        return
    
    user_locale = get_user_language(message.from_user.id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–≤–µ–¥–µ–Ω–æ —á–∏—Å–ª–æ
    if not message.text.isdigit() or int(message.text) <= 0:
        kb = types.InlineKeyboardMarkup()
        kb.add(types.InlineKeyboardButton(text=user_locale.get("button_cancel", "üîô –û—Ç–º–µ–Ω–∞"), callback_data="manage_promo_codes"))
        
        await message.answer(
            user_locale.get("admin_invalid_uses", "‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"),
            reply_markup=kb
        )
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(promo_uses=int(message.text))
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è —Å–∞–º–æ–≥–æ –ø—Ä–æ–º–æ–∫–æ–¥–∞
    kb = types.InlineKeyboardMarkup()
    kb.add(types.InlineKeyboardButton(text=user_locale.get("button_no_expiry", "–ë–µ—Å—Å—Ä–æ—á–Ω–æ"), callback_data="promo_expiry:none"))
    kb.add(types.InlineKeyboardButton(text="7 –¥–Ω–µ–π", callback_data="promo_expiry:7"))
    kb.add(types.InlineKeyboardButton(text="30 –¥–Ω–µ–π", callback_data="promo_expiry:30"))
    kb.add(types.InlineKeyboardButton(text="90 –¥–Ω–µ–π", callback_data="promo_expiry:90"))
    kb.add(types.InlineKeyboardButton(text=user_locale.get("button_cancel", "üîô –û—Ç–º–µ–Ω–∞"), callback_data="manage_promo_codes"))
    
    await message.answer(
        user_locale.get("admin_enter_promo_expiry", "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è —Å–∞–º–æ–≥–æ –ø—Ä–æ–º–æ–∫–æ–¥–∞ (—á–µ—Ä–µ–∑ —Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –æ–Ω —Å—Ç–∞–Ω–µ—Ç –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–º):"),
        reply_markup=kb
    )
    
    await AdminStates.waiting_for_promo_expiry.set()

async def process_activate_promo(callback: types.CallbackQuery, state: FSMContext, locale):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞"""
    if callback.from_user.id not in ADMIN_IDS:
        await callback.answer("‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏", show_alert=True)
        return
    
    user_locale = get_user_language(callback.from_user.id)
    await callback.answer()
    
    try:
        promo_id = int(callback.data.split(":")[1])
        success = update_promo_code(promo_id, is_active=True)
        
        kb = types.InlineKeyboardMarkup()
        kb.add(types.InlineKeyboardButton(
            text=user_locale.get("back_to_promo_management", "üîô –ö —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –ø—Ä–æ–º–æ–∫–æ–¥–∞–º–∏"),
            callback_data="manage_promo_codes"
        ))
        
        if success:
            text = user_locale.get("admin_promo_activated", "‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
        else:
            text = user_locale.get("admin_promo_activate_error", "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞")
        
        await callback.message.edit_text(text, reply_markup=kb)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞: {str(e)}")
        kb = types.InlineKeyboardMarkup()
        kb.add(types.InlineKeyboardButton(
            text=user_locale.get("back_to_promo_management", "üîô –ö —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –ø—Ä–æ–º–æ–∫–æ–¥–∞–º–∏"),
            callback_data="manage_promo_codes"
        ))
        await callback.message.edit_text(
            user_locale.get("admin_promo_activate_error", "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞"),
            reply_markup=kb
        )

async def process_give_price(callback: types.CallbackQuery, state: FSMContext, locale):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–¥–∞—á–∏ —Ü–µ–Ω"""
    if callback.from_user.id not in ADMIN_IDS:
        await callback.answer("‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏", show_alert=True)
        return

    user_locale = get_user_language(callback.from_user.id)
    await callback.answer()
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Ü–µ–Ω—ã
        prices = get_premium_prices()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å —Ü–µ–Ω–∞–º–∏
        text = "üíµ –¢–µ–∫—É—â–∏–µ —Ü–µ–Ω—ã:\n\n"
        
        duration_mapping = {
            30: "–ú–µ—Å—è—Ü",
            180: "–ü–æ–ª–≥–æ–¥–∞",
            365: "–ì–æ–¥",
            36500: "–ù–∞–≤—Å–µ–≥–¥–∞"
        }
        
        for price in prices:
            duration_name = duration_mapping.get(price.duration_days, f"{price.duration_days} –¥–Ω–µ–π")
            text += f"‚Ä¢ {duration_name}: {price.price}‚ÇΩ\n"
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞
        kb = types.InlineKeyboardMarkup()
        kb.add(types.InlineKeyboardButton(
            text=user_locale.get("back_to_admin_panel", "üîô –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"),
            callback_data="back_to_admin"
        ))
        
        await callback.message.edit_text(text, reply_markup=kb)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ü–µ–Ω: {str(e)}")
        kb = types.InlineKeyboardMarkup()
        kb.add(types.InlineKeyboardButton(
            text=user_locale.get("back_to_admin_panel", "üîô –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"),
            callback_data="back_to_admin"
        ))
        await callback.message.edit_text(
            user_locale.get("error_loading_prices", "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ü–µ–Ω"),
            reply_markup=kb
        )

def register_handlers_admin(dp: Dispatcher, locale):
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∞–¥–º–∏–Ω–∫–∏"""
    dp.register_message_handler(lambda message: cmd_admin_panel(message, locale), commands=["admin", "panel"])
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –≤—ã–¥–∞—á–∏ –º–æ–Ω–µ—Ç
    dp.register_callback_query_handler(
        lambda call, state: process_give_crystals(call, state, locale),
        lambda c: c.data == "give_crystals",
        state="*"
    )
    dp.register_message_handler(
        lambda message, state: process_user_id_for_crystals(message, state, locale),
        state=AdminGiveCrystalsStates.waiting_for_user_id
    )
    dp.register_message_handler(
        lambda message, state: process_crystals_amount(message, state, locale),
        state=AdminGiveCrystalsStates.waiting_for_amount
    )
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø—Ä–µ–º–∏—É–º–∞
    dp.register_callback_query_handler(
        lambda call, state: process_give_premium(call, state, locale),
        lambda c: c.data == "give_premium",
        state="*"
    )
    dp.register_message_handler(
        lambda message, state: process_user_id_input(message, state, locale),
        state=AdminStates.waiting_for_user_id
    )
    dp.register_callback_query_handler(
        lambda call, state: process_premium_duration(call, state, locale),
        lambda c: c.data.startswith("premium_"),
        state=AdminStates.waiting_for_duration
    )
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ü–µ–Ω
    dp.register_callback_query_handler(
        lambda call, state: process_admin_prices(call, state, locale),
        lambda c: c.data == "premium_prices",
        state="*"
    )
    dp.register_callback_query_handler(
        lambda call, state: process_change_price(call, state, locale),
        lambda c: c.data.startswith("change_price:"),
        state="*"
    )
    dp.register_message_handler(
        lambda message, state: process_price_input(message, state, locale),
        state=AdminStates.waiting_for_price
    )
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Å–ø–æ–Ω—Å–æ—Ä–æ–≤
    dp.register_callback_query_handler(
        lambda call, state: process_manage_sponsors(call, state, locale),
        lambda c: c.data == "manage_sponsors",
        state="*"
    )
    dp.register_callback_query_handler(
        lambda call, state: process_add_sponsor(call, state, locale),
        lambda c: c.data == "add_sponsor",
        state="*"
    )
    dp.register_message_handler(
        lambda message, state: process_sponsor_name_input(message, state, locale),
        state=AdminStates.waiting_for_sponsor_name
    )
    dp.register_message_handler(
        lambda message, state: process_sponsor_link_input(message, state, locale),
        state=AdminStates.waiting_for_sponsor_link
    )
    dp.register_message_handler(
        lambda message, state: process_sponsor_channel_id_input(message, state, locale),
        state=AdminStates.waiting_for_sponsor_channel_id
    )
    dp.register_message_handler(
        lambda message, state: process_sponsor_reward_input(message, state, locale),
        state=AdminStates.waiting_for_sponsor_reward
    )
    dp.register_callback_query_handler(
        lambda call, state: process_toggle_sponsor(call, state, locale),
        lambda c: c.data.startswith("toggle_sponsor:"),
        state="*"
    )
    dp.register_callback_query_handler(
        lambda call, state: process_delete_sponsor_confirm(call, state, locale),
        lambda c: c.data.startswith("delete_sponsor:"),
        state="*"
    )
    dp.register_callback_query_handler(
        lambda call, state: process_confirm_delete_sponsor(call, state, locale),
        lambda c: c.data.startswith("confirm_delete_sponsor:"),
        state="*"
    )
    dp.register_callback_query_handler(
        lambda call, state: process_cancel_delete_sponsor(call, state, locale),
        lambda c: c.data.startswith("cancel_delete_sponsor:"),
        state="*"
    )
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤
    dp.register_callback_query_handler(
        lambda call, state: process_manage_promo_codes(call, state, locale),
        lambda c: c.data == "manage_promo_codes",
        state="*"
    )
    dp.register_callback_query_handler(
        lambda call, state: process_add_promo_code(call, state, locale),
        lambda c: c.data == "add_promo_code",
        state="*"
    )
    dp.register_message_handler(
        lambda message, state: process_promo_code_input(message, state, locale),
        state=AdminStates.waiting_for_promo_code
    )
    dp.register_callback_query_handler(
        lambda call, state: process_promo_duration_selection(call, state, locale),
        lambda c: c.data.startswith("promo_duration:"),
        state=AdminStates.waiting_for_promo_duration
    )
    dp.register_callback_query_handler(
        lambda call, state: process_promo_uses_selection(call, state, locale),
        lambda c: c.data.startswith("promo_uses:"),
        state=AdminStates.waiting_for_promo_uses
    )
    dp.register_callback_query_handler(
        lambda call, state: process_promo_expiry_selection(call, state, locale),
        lambda c: c.data.startswith("promo_expiry:"),
        state=AdminStates.waiting_for_promo_expiry
    )
    dp.register_callback_query_handler(
        lambda call, state: process_delete_promo(call, state, locale),
        lambda c: c.data.startswith("delete_promo:"),
        state="*"
    )
    dp.register_callback_query_handler(
        lambda call, state: process_activate_promo(call, state, locale),
        lambda c: c.data.startswith("activate_promo:"),
        state="*"
    )
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–¥–∞—á–∏ —Ü–µ–Ω
    dp.register_callback_query_handler(
        lambda call, state: process_give_price(call, state, locale),
        lambda c: c.data == "give_price",
        state="*"
    )
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
    dp.register_callback_query_handler(
        lambda call, state: process_back_to_admin(call, state, locale),
        lambda c: c.data == "back_to_admin" or c.data == "manage_promo_codes" or c.data == "manage_sponsors",
        state="*"
    )
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã –¥–ª—è –≤—Å–µ—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
    dp.register_message_handler(
        lambda message, state: process_cancel_premium(message, state, locale),
        lambda message: message.text.lower() in ["–æ—Ç–º–µ–Ω–∞", "üîô", "/cancel"],
        state=[
            AdminStates.waiting_for_user_id,
            AdminStates.waiting_for_duration,
            AdminStates.waiting_for_price,
            AdminStates.waiting_for_sponsor_name,
            AdminStates.waiting_for_sponsor_link,
            AdminStates.waiting_for_sponsor_channel_id,
            AdminStates.waiting_for_sponsor_reward,
            AdminStates.waiting_for_promo_code,
            AdminStates.waiting_for_promo_duration,
            AdminStates.waiting_for_promo_uses,
            AdminStates.waiting_for_promo_expiry,
            AdminGiveCrystalsStates.waiting_for_user_id,
            AdminGiveCrystalsStates.waiting_for_amount
        ]
    ) 