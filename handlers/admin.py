from aiogram import types
from aiogram.dispatcher import Dispatcher, FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from config import ADMIN_IDS
from keyboards.inline_keyboard import admin_panel_keyboard, admin_premium_duration_keyboard, admin_premium_keyboard
from database.crud import update_user_premium, get_premium_prices, update_premium_price
from utils.helpers import get_user_language
import datetime
import logging

logger = logging.getLogger(__name__)

class AdminStates(StatesGroup):
    waiting_for_user_id = State()
    waiting_for_duration = State()
    waiting_for_price = State()

async def cmd_admin_panel(message: types.Message, locale):
    if message.from_user.id not in ADMIN_IDS:
        return
    
    user_locale = get_user_language(message.from_user.id)
    text = user_locale.get("admin_panel_text", "üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
    await message.answer(text, reply_markup=admin_panel_keyboard(user_locale))

async def process_give_premium(callback: types.CallbackQuery, state: FSMContext, locale):
    if callback.from_user.id not in ADMIN_IDS:
        await callback.answer("‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏", show_alert=True)
        return
    
    user_locale = get_user_language(callback.from_user.id)
    await callback.answer()
    await callback.message.edit_text(user_locale.get("enter_user_id", "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—Ç–∏—Ç–µ –≤—ã–¥–∞—Ç—å –ø—Ä–µ–º–∏—É–º:"))
    await AdminStates.waiting_for_user_id.set()

async def process_user_id_input(message: types.Message, state: FSMContext, locale):
    if message.from_user.id not in ADMIN_IDS:
        return
    
    user_locale = get_user_language(message.from_user.id)
    
    if not message.text.isdigit():
        await message.answer(user_locale.get("invalid_user_id", "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã)"))
        return
    
    await state.update_data(user_id=int(message.text))
    await message.answer(
        user_locale.get("select_premium_duration", "–í—ã–±–µ—Ä–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø—Ä–µ–º–∏—É–º–∞:"), 
        reply_markup=admin_premium_duration_keyboard(user_locale)
    )
    await AdminStates.waiting_for_duration.set()

async def process_premium_duration(callback: types.CallbackQuery, state: FSMContext, locale):
    if callback.from_user.id not in ADMIN_IDS:
        await callback.answer("‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏", show_alert=True)
        return

    user_locale = get_user_language(callback.from_user.id)
    duration_mapping = {
        "premium_1month": 30,
        "premium_6months": 180,
        "premium_1year": 365,
        "premium_forever": 36500  # 100 –ª–µ—Ç
    }
    
    duration_days = duration_mapping.get(callback.data)
    if not duration_days:
        await callback.answer(user_locale.get("invalid_duration", "‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å"), show_alert=True)
        return

    data = await state.get_data()
    user_id = data.get('user_id')
    
    if not user_id:
        await callback.answer(user_locale.get("user_id_not_found", "‚ùå –û—à–∏–±–∫–∞: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω"), show_alert=True)
        return

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø—Ä–µ–º–∏—É–º–∞
    end_date = datetime.datetime.now() + datetime.timedelta(days=duration_days)
    
    try:
        update_user_premium(user_id, end_date)
        await callback.answer(user_locale.get("premium_success", "‚úÖ –ü—Ä–µ–º–∏—É–º —É—Å–ø–µ—à–Ω–æ –≤—ã–¥–∞–Ω!"), show_alert=True)
        await callback.message.edit_text(
            user_locale.get("premium_given", "‚úÖ –ü—Ä–µ–º–∏—É–º –≤—ã–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}\n–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {days} –¥–Ω–µ–π\n–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è: {date}").format(
                user_id=user_id,
                days=duration_days,
                date=end_date.strftime('%d.%m.%Y')
            ),
            reply_markup=admin_panel_keyboard(user_locale)
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–¥–∞—á–µ –ø—Ä–µ–º–∏—É–º–∞: {str(e)}")
        await callback.answer(user_locale.get("premium_error", "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–¥–∞—á–µ –ø—Ä–µ–º–∏—É–º–∞"), show_alert=True)
    
    await state.finish()

async def process_back_to_admin(callback: types.CallbackQuery, state: FSMContext, locale):
    if callback.from_user.id not in ADMIN_IDS:
        await callback.answer("‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏", show_alert=True)
        return
    
    user_locale = get_user_language(callback.from_user.id)
    await state.finish()
    await callback.answer()
    await callback.message.edit_text(
        user_locale.get("admin_panel_text", "üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"),
        reply_markup=admin_panel_keyboard(user_locale)
    )

async def process_admin_prices(callback: types.CallbackQuery, state: FSMContext, locale):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ü–µ–Ω–∞–º–∏ –ø—Ä–µ–º–∏—É–º–∞"""
    if callback.from_user.id not in ADMIN_IDS:
        await callback.answer("‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏", show_alert=True)
        return
    
    user_locale = get_user_language(callback.from_user.id)
    await callback.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Ü–µ–Ω—ã
    prices = get_premium_prices()
    prices_dict = {price.duration_type: price.price for price in prices}
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å —Ü–µ–Ω–∞–º–∏
    text = user_locale["admin_price_menu"].format(
        month=prices_dict.get("month", "500"),
        half_year=prices_dict.get("half_year", "2500"),
        year=prices_dict.get("year", "4500"),
        forever=prices_dict.get("forever", "9900")
    )
    
    await callback.message.edit_text(text, reply_markup=admin_premium_keyboard(user_locale))

async def process_change_price(callback: types.CallbackQuery, state: FSMContext, locale):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ü–µ–Ω—ã"""
    if callback.from_user.id not in ADMIN_IDS:
        await callback.answer("‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏", show_alert=True)
        return
    
    user_locale = get_user_language(callback.from_user.id)
    await callback.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏ –∏–∑ callback data
    duration_type = callback.data.split(":")[1]
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(duration_type=duration_type)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∏–ø–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    duration_name_mapping = {
        "month": "–º–µ—Å—è—Ü",
        "half_year": "–ø–æ–ª–≥–æ–¥–∞",
        "year": "–≥–æ–¥",
        "forever": "–Ω–∞–≤—Å–µ–≥–¥–∞"
    }
    
    duration_name = duration_name_mapping.get(duration_type, duration_type)
    
    await callback.message.edit_text(
        user_locale["admin_set_price_prompt"].format(duration=duration_name)
    )
    
    await AdminStates.waiting_for_price.set()

async def process_price_input(message: types.Message, state: FSMContext, locale):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–π —Ü–µ–Ω—ã"""
    if message.from_user.id not in ADMIN_IDS:
        return
    
    user_locale = get_user_language(message.from_user.id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–≤–µ–¥–µ–Ω–æ —á–∏—Å–ª–æ
    if not message.text.isdigit():
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ü–µ–Ω—ã")
        return
    
    new_price = int(message.text)
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    duration_type = data.get("duration_type")
    
    if not duration_type:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: —Ç–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    try:
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–Ω—É
        update_premium_price(duration_type, new_price)
        await message.answer(user_locale["admin_price_updated"])
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –º–µ–Ω—é —Ü–µ–Ω
        prices = get_premium_prices()
        prices_dict = {price.duration_type: price.price for price in prices}
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å —Ü–µ–Ω–∞–º–∏
        text = user_locale["admin_price_menu"].format(
            month=prices_dict.get("month", "500"),
            half_year=prices_dict.get("half_year", "2500"),
            year=prices_dict.get("year", "4500"),
            forever=prices_dict.get("forever", "9900")
        )
        
        await message.answer(text, reply_markup=admin_premium_keyboard(user_locale))
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ü–µ–Ω—ã: {str(e)}")
        await message.answer(user_locale["admin_price_error"])
    
    await state.finish()

def register_handlers_admin(dp: Dispatcher, locale):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏"""
    dp.register_message_handler(lambda message, state: cmd_admin_panel(message, locale), commands=["panel"])
    dp.register_callback_query_handler(lambda c, state: process_give_premium(c, state, locale), lambda c: c.data == "give_premium")
    dp.register_message_handler(lambda message, state: process_user_id_input(message, state, locale), state=AdminStates.waiting_for_user_id)
    dp.register_callback_query_handler(
        lambda c, state: process_premium_duration(c, state, locale),
        lambda c: c.data.startswith("premium_"),
        state=AdminStates.waiting_for_duration
    )
    dp.register_callback_query_handler(
        lambda c, state: process_back_to_admin(c, state, locale),
        lambda c: c.data == "back_to_admin"
    )
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ü–µ–Ω–∞–º–∏
    dp.register_callback_query_handler(
        lambda c, state: process_admin_prices(c, state, locale),
        lambda c: c.data == "manage_prices"
    )
    dp.register_callback_query_handler(
        lambda c, state: process_change_price(c, state, locale),
        lambda c: c.data.startswith("change_price:")
    )
    dp.register_message_handler(
        lambda message, state: process_price_input(message, state, locale),
        state=AdminStates.waiting_for_price
    ) 