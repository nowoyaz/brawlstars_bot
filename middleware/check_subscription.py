from aiogram import types
from aiogram.dispatcher.handler import CancelHandler
from aiogram.dispatcher.middlewares import BaseMiddleware
from config import CHANNEL_ID, CHANNEL_LINK
from keyboards.inline_keyboard import start_keyboard
import logging

logger = logging.getLogger(__name__)

class CheckSubscriptionMiddleware(BaseMiddleware):
    async def on_pre_process_update(self, update: types.Update, data: dict):
        if not update.message and not update.callback_query:
            return
            
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_id = update.message.from_user.id if update.message else update.callback_query.from_user.id
        
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—É /start –∏ –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ–¥–ø–∏—Å–∫–∏
        if update.message and update.message.text == "/start":
            return
            
        if update.callback_query and update.callback_query.data == "check_subscription":
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
        is_subscribed = await self.is_subscribed(user_id)
        if not is_subscribed:
            # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç—ã –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
            locale = data.get("locale", None)
            if update.message:
                await self.send_subscription_message(update.message, None, locale)
            elif update.callback_query:
                await self.send_subscription_message(None, update.callback_query, locale)
                
            raise CancelHandler()
    
    async def is_subscribed(self, user_id):
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏
            bot = self._dp.bot
            member = await bot.get_chat_member(chat_id=CHANNEL_ID, user_id=user_id)
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–∫–∏–Ω—É–ª –∫–∞–Ω–∞–ª
            return member.status not in ["left", "kicked", "banned"]
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
            return False
    
    async def send_subscription_message(self, message, callback_query, locale):
        if not locale:
            text = f"‚ùóÔ∏è –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª.\n\n–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª {CHANNEL_LINK} –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É¬ª"
        else:
            text = locale.get("subscription_required", "").format(channel_link=CHANNEL_LINK)
            
        keyboard = start_keyboard(locale if locale else {
            "button_start": "‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É",
            "button_channel": "üì£ –ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ –∫–∞–Ω–∞–ª"
        })
        
        if callback_query:
            await callback_query.message.edit_text(text=text, reply_markup=keyboard)
        else:
            await message.answer(text=text, reply_markup=keyboard)