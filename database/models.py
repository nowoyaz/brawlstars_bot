import datetime
from sqlalchemy import Column, Integer, String, Boolean, DateTime, Text, ForeignKey, Enum, Float
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import relationship

Base = declarative_base()




class User(Base):
    __tablename__ = "users"
    id = Column(Integer, primary_key=True, unique=True, index=True)
    tg_id = Column(Integer, unique=True, nullable=False)
    username = Column(String, nullable=True)
    first_name = Column(String, nullable=True)
    is_premium = Column(Boolean, default=False)
    premium_end_date = Column(DateTime, nullable=True)
    crystals = Column(Integer, default=100)
    language = Column(String, default="ru")
    blocked = Column(Boolean, default=False)
    last_gift = Column(DateTime, nullable=True)
    created_at = Column(DateTime, default=datetime.datetime.utcnow)
    updated_at = Column(DateTime, default=datetime.datetime.utcnow, onupdate=datetime.datetime.utcnow)
    coins = Column(Integer, default=0)
    premium_until = Column(DateTime, nullable=True)

    # –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å —Å –ø–æ–¥–ø–∏—Å–∫–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Å–ø–æ–Ω—Å–æ—Ä–æ–≤
    sponsor_subscriptions = relationship("UserSponsorSubscription", back_populates="user", foreign_keys="UserSponsorSubscription.user_tg_id")

class Referral(Base):
    __tablename__ = 'referrals'
    
    id = Column(Integer, primary_key=True, index=True)
    referrer_id = Column(Integer, nullable=False)
    referred_id = Column(Integer, nullable=False, unique=True)  # –∫–∞–∂–¥—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª –º–æ–∂–µ—Ç –±—ã—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑
    created_at = Column(DateTime, default=datetime.datetime.utcnow)



class Announcement(Base):
    __tablename__ = "announcements"
    id = Column(Integer, primary_key=True, index=True)
    user_id = Column(Integer, ForeignKey("users.id"), nullable=False)
    announcement_type = Column(Enum("team", "club", name="announcement_type"), nullable=False)
    image_id = Column(String, nullable=False)
    media_id = Column(String, nullable=True)
    media_type = Column(String, default="photo")
    description = Column(Text, nullable=False)
    keyword = Column(String, nullable=True)
    created_at = Column(DateTime, default=datetime.datetime.utcnow)

    
class Report(Base):
    __tablename__ = "reports"
    id = Column(Integer, primary_key=True, index=True)
    reporter_id = Column(Integer, ForeignKey("users.id"))
    announcement_id = Column(Integer, ForeignKey("announcements.id"))
    reason = Column(String, nullable=False)
    created_at = Column(DateTime, default=datetime.datetime.utcnow)

class Favorite(Base):
    __tablename__ = "favorites"
    id = Column(Integer, primary_key=True, index=True)
    user_id = Column(Integer, ForeignKey("users.id"))
    announcement_id = Column(Integer, ForeignKey("announcements.id"))
    created_at = Column(DateTime, default=datetime.datetime.utcnow)

class CrystalTransaction(Base):
    __tablename__ = "crystal_transactions"
    id = Column(Integer, primary_key=True, index=True)
    sender_id = Column(Integer, ForeignKey("users.id"))
    receiver_id = Column(Integer, ForeignKey("users.id"))
    amount = Column(Integer, nullable=False)
    created_at = Column(DateTime, default=datetime.datetime.utcnow)

class PremiumPrice(Base):
    __tablename__ = "premium_prices"
    id = Column(Integer, primary_key=True, index=True)
    duration_days = Column(Integer, nullable=False, unique=True)
    price = Column(Float, nullable=False)
    created_at = Column(DateTime, default=datetime.datetime.utcnow)
    updated_at = Column(DateTime, default=datetime.datetime.utcnow, onupdate=datetime.datetime.utcnow)

    def __init__(self, duration_days=None, price=None):
        super().__init__()
        self.duration_days = duration_days
        self.price = price

    @classmethod
    def initialize_default_prices(cls, session):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ü–µ–Ω—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç"""
        default_prices = [
            {"duration_days": 30, "price": 500.0},    # –º–µ—Å—è—Ü
            {"duration_days": 180, "price": 2500.0},  # –ø–æ–ª–≥–æ–¥–∞
            {"duration_days": 365, "price": 4500.0},  # –≥–æ–¥
            {"duration_days": 36500, "price": 9900.0} # –Ω–∞–≤—Å–µ–≥–¥–∞
        ]
        
        for price_data in default_prices:
            existing = session.query(cls).filter_by(duration_days=price_data["duration_days"]).first()
            if not existing:
                new_price = cls(duration_days=price_data["duration_days"], price=price_data["price"])
                session.add(new_price)
        
        try:
            session.commit()
        except Exception as e:
            session.rollback()
            raise e

class Sponsor(Base):
    __tablename__ = "sponsors"
    id = Column(Integer, primary_key=True, index=True)
    name = Column(String, nullable=False)
    link = Column(String, nullable=False)
    channel_id = Column(String, nullable=True)  # ID –∫–∞–Ω–∞–ª–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏
    reward = Column(Integer, default=0)
    is_active = Column(Boolean, default=True)
    created_at = Column(DateTime, default=datetime.datetime.utcnow)
    updated_at = Column(DateTime, default=datetime.datetime.utcnow, onupdate=datetime.datetime.utcnow)
    
    # –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å —Å –ø–æ–¥–ø–∏—Å–∫–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    user_subscriptions = relationship("UserSponsorSubscription", back_populates="sponsor")

class UserSponsorSubscription(Base):
    __tablename__ = 'user_sponsor_subscriptions'
    
    id = Column(Integer, primary_key=True)
    user_tg_id = Column(Integer, ForeignKey('users.tg_id'), nullable=False)
    sponsor_id = Column(Integer, ForeignKey('sponsors.id'), nullable=False)
    created_at = Column(DateTime, default=datetime.datetime.utcnow)
    
    # –°–≤—è–∑–∏ —Å –¥—Ä—É–≥–∏–º–∏ —Ç–∞–±–ª–∏—Ü–∞–º–∏
    user = relationship("User", back_populates="sponsor_subscriptions", foreign_keys=[user_tg_id])
    sponsor = relationship("Sponsor", back_populates="user_subscriptions")

class PromoCode(Base):
    __tablename__ = "promo_codes"
    id = Column(Integer, primary_key=True, index=True)
    code = Column(String, unique=True, nullable=False, index=True)
    duration_days = Column(Integer, nullable=False)  # –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –ø—Ä–µ–º–∏—É–º–∞ –≤ –¥–Ω—è—Ö
    max_uses = Column(Integer, default=1)  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π (1 = –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–π)
    uses_count = Column(Integer, default=0)  # –¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π
    is_active = Column(Boolean, default=True)
    created_at = Column(DateTime, default=datetime.datetime.utcnow)
    expires_at = Column(DateTime, nullable=True)  # –î–∞—Ç–∞ –∏—Å—Ç–µ—á–µ–Ω–∏—è —Å–∞–º–æ–≥–æ –ø—Ä–æ–º–æ–∫–æ–¥–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)

class PromoUse(Base):
    __tablename__ = "promo_uses"
    id = Column(Integer, primary_key=True, index=True)
    promo_id = Column(Integer, ForeignKey("promo_codes.id"), nullable=False)
    user_id = Column(Integer, ForeignKey("users.id"), nullable=False)
    used_at = Column(DateTime, default=datetime.datetime.utcnow)

class Achievement(Base):
    """–ú–æ–¥–µ–ª—å –¥–ª—è –æ–ø–∏—Å–∞–Ω–∏—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è"""
    __tablename__ = "achievements"
    id = Column(Integer, primary_key=True, index=True)
    key = Column(String, unique=True, nullable=False)  # –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
    name = Column(String, nullable=False)  # –ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
    description = Column(String, nullable=False)  # –û–ø–∏—Å–∞–Ω–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
    icon = Column(String, default="üèÜ")  # –≠–º–æ–¥–∑–∏ –∏–ª–∏ –∫–æ–¥ –∏–∫–æ–Ω–∫–∏ 
    is_purchasable = Column(Boolean, default=False)  # –ú–æ–∂–Ω–æ –ª–∏ –∫—É–ø–∏—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ
    price = Column(Integer, default=0)  # –¶–µ–Ω–∞ –≤ –º–æ–Ω–µ—Ç–∞—Ö, –µ—Å–ª–∏ –º–æ–∂–Ω–æ –∫—É–ø–∏—Ç—å
    created_at = Column(DateTime, default=datetime.datetime.utcnow)


class UserAchievement(Base):
    """–ú–æ–¥–µ–ª—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    __tablename__ = "user_achievements"
    id = Column(Integer, primary_key=True, index=True)
    user_id = Column(Integer, ForeignKey("users.id"), nullable=False)
    achievement_id = Column(Integer, ForeignKey("achievements.id"), nullable=False)
    achieved_at = Column(DateTime, default=datetime.datetime.utcnow)
    
    # –û—Ç–Ω–æ—à–µ–Ω–∏–µ –∫ –º–æ–¥–µ–ª—è–º User –∏ Achievement
    user = relationship("User", backref="achievements")
    achievement = relationship("Achievement")


class UserVisitedSection(Base):
    """–ú–æ–¥–µ–ª—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ—Å–µ—â–µ–Ω–Ω—ã—Ö —Ä–∞–∑–¥–µ–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º (–¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è '–ò—Å–∫–∞—Ç–µ–ª—å')"""
    __tablename__ = "user_visited_sections"
    id = Column(Integer, primary_key=True, index=True)
    user_id = Column(Integer, ForeignKey("users.id"), nullable=False)
    section = Column(String, nullable=False)  # –ù–∞–∑–≤–∞–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–∞
    visited_at = Column(DateTime, default=datetime.datetime.utcnow)
    
    # –û—Ç–Ω–æ—à–µ–Ω–∏–µ –∫ –º–æ–¥–µ–ª–∏ User
    user = relationship("User", backref="visited_sections")

class UserSecretPurchase(Base):
    """–ú–æ–¥–µ–ª—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ–∫—É–ø–æ–∫ —Å–µ–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
    __tablename__ = "user_secret_purchases"
    id = Column(Integer, primary_key=True, index=True)
    user_id = Column(Integer, ForeignKey("users.id"), nullable=False)
    content_key = Column(String, nullable=False)  # –ö–ª—é—á –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    purchased_at = Column(DateTime, default=datetime.datetime.utcnow)
    price = Column(Integer, nullable=False)  # –¶–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∏
    
    # –û—Ç–Ω–æ—à–µ–Ω–∏–µ –∫ –º–æ–¥–µ–ª–∏ User
    user = relationship("User", backref="secret_purchases")

class BotSettings(Base):
    """–ú–æ–¥–µ–ª—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –±–æ—Ç–∞"""
    __tablename__ = "bot_settings"
    
    id = Column(Integer, primary_key=True)
    key = Column(String, unique=True, nullable=False)  # –ö–ª—é—á –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    value = Column(String)  # –ó–Ω–∞—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    updated_at = Column(DateTime, default=datetime.datetime.utcnow, onupdate=datetime.datetime.utcnow)


print(1)