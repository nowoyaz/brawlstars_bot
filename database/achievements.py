import datetime
from sqlalchemy import select, func, and_, or_
from database.models import User, Achievement, UserAchievement, UserVisitedSection, Announcement, Referral, UserSecretPurchase
from database.session import SessionLocal
import logging

logger = logging.getLogger(__name__)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –∫–ª—é—á–µ–π –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
ACHIEVEMENT_MAJOR = "major"
ACHIEVEMENT_POPULAR = "popular"
ACHIEVEMENT_CLUB_FIGHTER = "club_fighter"
ACHIEVEMENT_EXPLORER = "explorer"
ACHIEVEMENT_LEGEND = "legend"
ACHIEVEMENT_LEPRECHAUN = "leprechaun"
ACHIEVEMENT_LUCKY = "lucky"
ACHIEVEMENT_FAN = "fan"
ACHIEVEMENT_BUSINESS = "business"
ACHIEVEMENT_FOLLOW_ME = "follow_me"
ACHIEVEMENT_FRIEND = "friend"

# –°–ø–∏—Å–æ–∫ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ä–∞–∑–¥–µ–ª–æ–≤ –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è "–ò—Å–∫–∞—Ç–µ–ª—å"
REQUIRED_SECTIONS = [
    "search_team_menu", 
    "search_club_menu", 
    "crystals", 
    "premium", 
    "additional",
    "gift"
]

def initialize_achievements():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –∏—Ö –µ—â–µ –Ω–µ—Ç"""
    session = SessionLocal()
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —É–∂–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –≤ –±–∞–∑–µ
        achievements_count = session.query(Achievement).count()
        
        if achievements_count > 0:
            return
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—Å–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
        achievements = [
            # –ü–æ–∫—É–ø–∞–µ–º–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ
            Achievement(
                key=ACHIEVEMENT_MAJOR,
                name="–ú–∞–∂–æ—Ä",
                description="–î–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–æ –≤–∞—à–µ–π —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π —Å–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏",
                icon="üí∞",
                is_purchasable=True,
                price=10000
            ),
            # –°–æ–∑–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –æ –ø–æ–∏—Å–∫–µ –∫–æ–º–∞–Ω–¥—ã
            Achievement(
                key=ACHIEVEMENT_POPULAR,
                name="–ü–æ–ø—É–ª—è—Ä–Ω—ã–π",
                description="–î–æ–±–∞–≤–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –ø–æ –ø–æ–∏—Å–∫—É –∫–æ–º–∞–Ω–¥—ã",
                icon="üë•"
            ),
            # –°–æ–∑–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –æ –ø–æ–∏—Å–∫–µ –∫–ª—É–±–∞
            Achievement(
                key=ACHIEVEMENT_CLUB_FIGHTER,
                name="–ë–æ–π—Ü–æ–≤—Å–∫–∏–π –∫–ª—É–±",
                description="–î–æ–±–∞–≤–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –ø–æ –ø–æ–∏—Å–∫—É –∫–ª—É–±–∞",
                icon="ü•ä"
            ),
            # –ü–æ—Å–µ—Ç–∏—Ç—å –≤—Å–µ —Ä–∞–∑–¥–µ–ª—ã –±–æ—Ç–∞
            Achievement(
                key=ACHIEVEMENT_EXPLORER,
                name="–ò—Å–∫–∞—Ç–µ–ª—å",
                description="–ü–æ—Å–µ—Ç–∏—Ç—å –≤—Å–µ —Ä–∞–∑–¥–µ–ª—ã –±–æ—Ç–∞",
                icon="üîç"
            ),
            # –ö—É–ø–∏—Ç—å –ø—Ä–µ–º–∏—É–º
            Achievement(
                key=ACHIEVEMENT_LEGEND,
                name="–õ–µ–≥–µ–Ω–¥–∞",
                description="–ö—É–ø–∏—Ç—å –ø—Ä–µ–º–∏—É–º —Å—Ç–∞—Ç—É—Å",
                icon="‚≠ê"
            ),
            # –ù–∞–∫–æ–ø–∏—Ç—å 15000 –º–æ–Ω–µ—Ç
            Achievement(
                key=ACHIEVEMENT_LEPRECHAUN,
                name="–õ–∏–ø—Ä–∏–∫–æ–Ω",
                description="–ù–∞–∫–æ–ø–∏—Ç—å 15,000 –º–æ–Ω–µ—Ç",
                icon="üçÄ"
            ),
            # –ü–æ–ª—É—á–∏—Ç—å –ø–æ–¥–∞—Ä–æ–∫
            Achievement(
                key=ACHIEVEMENT_LUCKY,
                name="–ò—Å–ø—ã—Ç–∞—Ç—å —É–¥–∞—á—É",
                description="–ü—Ä–∏–Ω—è—Ç—å —É—á–∞—Å—Ç–∏–µ –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ –º–æ–Ω–µ—Ç",
                icon="üéÅ"
            ),
            # –ö—É–ø–∏—Ç—å —Å–µ–∫—Ä–µ—Ç–Ω—ã–π —Ä–æ–ª–∏–∫
            Achievement(
                key=ACHIEVEMENT_FAN,
                name="–ü—Ä–µ–¥–∞–Ω–Ω—ã–π —Ñ–∞–Ω–∞—Ç",
                description="–ö—É–ø–∏—Ç—å —Å–µ–∫—Ä–µ—Ç–Ω—ã–π —Ä–æ–ª–∏–∫ –±—É–±—Å–∞",
                icon="üé¨"
            ),
            # –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å 1 —á–µ–ª–æ–≤–µ–∫–∞
            Achievement(
                key=ACHIEVEMENT_BUSINESS,
                name="–ë–∏–∑–Ω–µ—Å-–º–∞—á–æ",
                description="–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å —á–µ–ª–æ–≤–µ–∫–∞ –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ",
                icon="üíº"
            ),
            # –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å 10 —á–µ–ª–æ–≤–µ–∫
            Achievement(
                key=ACHIEVEMENT_FOLLOW_ME,
                name="–î–µ–ª–∞–π –∫–∞–∫ —è",
                description="–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å 10 —á–µ–ª–æ–≤–µ–∫ –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ",
                icon="üëë"
            ),
            # –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å 25 —á–µ–ª–æ–≤–µ–∫
            Achievement(
                key=ACHIEVEMENT_FRIEND,
                name="–ù–∞—Å—Ç–æ—è—â–∏–π –¥—Ä—É–≥",
                description="–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å 25 —á–µ–ª–æ–≤–µ–∫ –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ",
                icon="‚ù§Ô∏è"
            )
        ]
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –≤ –±–∞–∑—É
        session.add_all(achievements)
        session.commit()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π: {e}")
        session.rollback()
    finally:
        session.close()

def get_all_achievements():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    session = SessionLocal()
    try:
        achievements = session.query(Achievement).all()
        return achievements
    finally:
        session.close()

def get_user_achievements(user_id: int):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    session = SessionLocal()
    try:
        # –ù–∞—Ö–æ–¥–∏–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ tg_id
        user = session.query(User).filter(User.tg_id == user_id).first()
        if not user:
            return []
            
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_achievements = session.query(UserAchievement, Achievement).join(
            Achievement, UserAchievement.achievement_id == Achievement.id
        ).filter(
            UserAchievement.user_id == user.id
        ).all()
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
        achievements = []
        for ua, a in user_achievements:
            achievements.append({
                'id': a.id,
                'key': a.key,
                'name': a.name,
                'description': a.description,
                'icon': a.icon,
                'achieved_at': ua.achieved_at
            })
        
        return achievements
    finally:
        session.close()

def get_available_achievements(user_id: int):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â–µ –Ω–µ –ø–æ–ª—É—á–∏–ª"""
    session = SessionLocal()
    try:
        # –ù–∞—Ö–æ–¥–∏–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ tg_id
        user = session.query(User).filter(User.tg_id == user_id).first()
        if not user:
            return []
            
        # –ü–æ–ª—É—á–∞–µ–º ID —É–∂–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
        earned_achievement_ids = session.query(UserAchievement.achievement_id).filter(
            UserAchievement.user_id == user.id
        ).all()
        earned_achievement_ids = [a[0] for a in earned_achievement_ids]
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö
        available_achievements = session.query(Achievement).filter(
            ~Achievement.id.in_(earned_achievement_ids)
        ).all()
        
        return available_achievements
    finally:
        session.close()

def award_achievement(user_id: int, achievement_key: str):
    """–í—ã–¥–∞—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    session = SessionLocal()
    try:
        # –ù–∞—Ö–æ–¥–∏–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ tg_id
        user = session.query(User).filter(User.tg_id == user_id).first()
        if not user:
            return False
            
        # –ù–∞—Ö–æ–¥–∏–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –ø–æ –∫–ª—é—á—É
        achievement = session.query(Achievement).filter(Achievement.key == achievement_key).first()
        if not achievement:
            return False
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–∫–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        existing = session.query(UserAchievement).filter(
            UserAchievement.user_id == user.id,
            UserAchievement.achievement_id == achievement.id
        ).first()
        
        if existing:
            return False
            
        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
        user_achievement = UserAchievement(
            user_id=user.id,
            achievement_id=achievement.id
        )
        
        session.add(user_achievement)
        session.commit()
        
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–¥–∞—á–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è: {e}")
        session.rollback()
        return False
    finally:
        session.close()

def buy_achievement(user_id: int, achievement_key: str):
    """–ö—É–ø–∏—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –∑–∞ –º–æ–Ω–µ—Ç—ã"""
    session = SessionLocal()
    try:
        # –ù–∞—Ö–æ–¥–∏–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ tg_id
        user = session.query(User).filter(User.tg_id == user_id).first()
        if not user:
            return {"success": False, "reason": "user_not_found"}
            
        # –ù–∞—Ö–æ–¥–∏–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –ø–æ –∫–ª—é—á—É
        achievement = session.query(Achievement).filter(
            Achievement.key == achievement_key,
            Achievement.is_purchasable == True
        ).first()
        
        if not achievement:
            return {"success": False, "reason": "achievement_not_found"}
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–∫–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        existing = session.query(UserAchievement).filter(
            UserAchievement.user_id == user.id,
            UserAchievement.achievement_id == achievement.id
        ).first()
        
        if existing:
            return {"success": False, "reason": "already_awarded"}
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ö–≤–∞—Ç–∞–µ—Ç –ª–∏ –º–æ–Ω–µ—Ç
        if user.crystals < achievement.price:
            return {"success": False, "reason": "not_enough_coins"}
            
        # –°–ø–∏—Å—ã–≤–∞–µ–º –º–æ–Ω–µ—Ç—ã –∏ –≤—ã–¥–∞–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ
        user.crystals -= achievement.price
        
        user_achievement = UserAchievement(
            user_id=user.id,
            achievement_id=achievement.id
        )
        
        session.add(user_achievement)
        session.commit()
        
        return {"success": True, "crystals_left": user.crystals}
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è: {e}")
        session.rollback()
        return {"success": False, "reason": "error"}
    finally:
        session.close()

def record_section_visit(user_id: int, section: str):
    """–ó–∞–ø–∏—Å–∞—Ç—å –ø–æ—Å–µ—â–µ–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"""
    session = SessionLocal()
    try:
        # –ù–∞—Ö–æ–¥–∏–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ tg_id
        user = session.query(User).filter(User.tg_id == user_id).first()
        if not user:
            return False
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ—Å–µ—â–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —ç—Ç–æ—Ç —Ä–∞–∑–¥–µ–ª —Ä–∞–Ω–µ–µ
        existing = session.query(UserVisitedSection).filter(
            UserVisitedSection.user_id == user.id,
            UserVisitedSection.section == section
        ).first()
        
        if existing:
            # –†–∞–∑–¥–µ–ª —É–∂–µ –±—ã–ª –ø–æ—Å–µ—â–µ–Ω, –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
            return False
            
        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –ø–æ—Å–µ—â–µ–Ω–∏–∏
        visit = UserVisitedSection(
            user_id=user.id,
            section=section
        )
        
        session.add(visit)
        session.commit()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—Å–µ –ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ä–∞–∑–¥–µ–ª—ã –ø–æ—Å–µ—â–µ–Ω—ã
        visited_sections = session.query(
            UserVisitedSection.section
        ).filter(
            UserVisitedSection.user_id == user.id,
            UserVisitedSection.section.in_(REQUIRED_SECTIONS)
        ).all()
        
        visited_sections = [v[0] for v in visited_sections]
        
        # –ï—Å–ª–∏ –≤—Å–µ —Ä–∞–∑–¥–µ–ª—ã –ø–æ—Å–µ—â–µ–Ω—ã, –≤—ã–¥–∞–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ "–ò—Å–∫–∞—Ç–µ–ª—å"
        if set(visited_sections) == set(REQUIRED_SECTIONS):
            # –ù–∞—Ö–æ–¥–∏–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ "–ò—Å–∫–∞—Ç–µ–ª—å"
            explorer_achievement = session.query(Achievement).filter(
                Achievement.key == ACHIEVEMENT_EXPLORER
            ).first()
            
            if explorer_achievement:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–≥–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
                existing_achievement = session.query(UserAchievement).filter(
                    UserAchievement.user_id == user.id,
                    UserAchievement.achievement_id == explorer_achievement.id
                ).first()
                
                if not existing_achievement:
                    # –í—ã–¥–∞–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ
                    user_achievement = UserAchievement(
                        user_id=user.id,
                        achievement_id=explorer_achievement.id
                    )
                    
                    session.add(user_achievement)
                    session.commit()
                    return True
        
        return False
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –ø–æ—Å–µ—â–µ–Ω–∏—è —Ä–∞–∑–¥–µ–ª–∞: {e}")
        session.rollback()
        return False
    finally:
        session.close()

def check_coins_achievement(user_id: int):
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ '–õ–∏–ø—Ä–∏–∫–æ–Ω' (–Ω–∞–∫–æ–ø–∏—Ç—å 15000 –º–æ–Ω–µ—Ç)"""
    session = SessionLocal()
    try:
        # –ù–∞—Ö–æ–¥–∏–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ tg_id
        user = session.query(User).filter(User.tg_id == user_id).first()
        if not user:
            return False
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
        if user.crystals >= 15000:
            # –ù–∞—Ö–æ–¥–∏–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ "–õ–∏–ø—Ä–∏–∫–æ–Ω"
            achievement = session.query(Achievement).filter(
                Achievement.key == ACHIEVEMENT_LEPRECHAUN
            ).first()
            
            if achievement:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–≥–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
                existing = session.query(UserAchievement).filter(
                    UserAchievement.user_id == user.id,
                    UserAchievement.achievement_id == achievement.id
                ).first()
                
                if not existing:
                    # –í—ã–¥–∞–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ
                    user_achievement = UserAchievement(
                        user_id=user.id,
                        achievement_id=achievement.id
                    )
                    
                    session.add(user_achievement)
                    session.commit()
                    return True
        
        return False
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –õ–∏–ø—Ä–∏–∫–æ–Ω: {e}")
        session.rollback()
        return False
    finally:
        session.close()

def check_referral_achievements(user_id: int):
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è"""
    session = SessionLocal()
    try:
        # –ù–∞—Ö–æ–¥–∏–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ tg_id
        user = session.query(User).filter(User.tg_id == user_id).first()
        if not user:
            return False
            
        # –°—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
        referral_count = session.query(func.count(Referral.id)).filter(
            Referral.referrer_id == user.tg_id
        ).scalar()
        
        awarded = False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ "–ë–∏–∑–Ω–µ—Å-–º–∞—á–æ" (1 —Ä–µ—Ñ–µ—Ä–∞–ª)
        if referral_count >= 1:
            achievement = session.query(Achievement).filter(
                Achievement.key == ACHIEVEMENT_BUSINESS
            ).first()
            
            if achievement:
                existing = session.query(UserAchievement).filter(
                    UserAchievement.user_id == user.id,
                    UserAchievement.achievement_id == achievement.id
                ).first()
                
                if not existing:
                    user_achievement = UserAchievement(
                        user_id=user.id,
                        achievement_id=achievement.id
                    )
                    
                    session.add(user_achievement)
                    awarded = True
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ "–î–µ–ª–∞–π –∫–∞–∫ —è" (10 —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤)
        if referral_count >= 10:
            achievement = session.query(Achievement).filter(
                Achievement.key == ACHIEVEMENT_FOLLOW_ME
            ).first()
            
            if achievement:
                existing = session.query(UserAchievement).filter(
                    UserAchievement.user_id == user.id,
                    UserAchievement.achievement_id == achievement.id
                ).first()
                
                if not existing:
                    user_achievement = UserAchievement(
                        user_id=user.id,
                        achievement_id=achievement.id
                    )
                    
                    session.add(user_achievement)
                    awarded = True
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ "–ù–∞—Å—Ç–æ—è—â–∏–π –¥—Ä—É–≥" (25 —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤)
        if referral_count >= 25:
            achievement = session.query(Achievement).filter(
                Achievement.key == ACHIEVEMENT_FRIEND
            ).first()
            
            if achievement:
                existing = session.query(UserAchievement).filter(
                    UserAchievement.user_id == user.id,
                    UserAchievement.achievement_id == achievement.id
                ).first()
                
                if not existing:
                    user_achievement = UserAchievement(
                        user_id=user.id,
                        achievement_id=achievement.id
                    )
                    
                    session.add(user_achievement)
                    awarded = True
        
        if awarded:
            session.commit()
            return True
        
        return False
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π: {e}")
        session.rollback()
        return False
    finally:
        session.close()

def record_secret_purchase(user_id: int, content_key: str, price: int):
    """–ó–∞–ø–∏—Å–∞—Ç—å –ø–æ–∫—É–ø–∫—É —Å–µ–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∏ –≤—ã–¥–∞—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ"""
    session = SessionLocal()
    try:
        # –ù–∞—Ö–æ–¥–∏–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ tg_id
        user = session.query(User).filter(User.tg_id == user_id).first()
        if not user:
            return {"success": False, "reason": "user_not_found"}
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
        if user.crystals < price:
            return {"success": False, "reason": "not_enough_coins"}
            
        # –°–ø–∏—Å—ã–≤–∞–µ–º –º–æ–Ω–µ—Ç—ã
        user.crystals -= price
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –ø–æ–∫—É–ø–∫—É
        purchase = UserSecretPurchase(
            user_id=user.id,
            content_key=content_key,
            price=price
        )
        
        session.add(purchase)
        
        # –í—ã–¥–∞–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ "–ü—Ä–µ–¥–∞–Ω–Ω—ã–π —Ñ–∞–Ω–∞—Ç"
        achievement = session.query(Achievement).filter(
            Achievement.key == ACHIEVEMENT_FAN
        ).first()
        
        if achievement:
            existing = session.query(UserAchievement).filter(
                UserAchievement.user_id == user.id,
                UserAchievement.achievement_id == achievement.id
            ).first()
            
            if not existing:
                user_achievement = UserAchievement(
                    user_id=user.id,
                    achievement_id=achievement.id
                )
                
                session.add(user_achievement)
        
        session.commit()
        return {"success": True, "crystals_left": user.crystals}
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –ø–æ–∫—É–ø–∫–∏ —Å–µ–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞: {e}")
        session.rollback()
        return {"success": False, "reason": "error"}
    finally:
        session.close()

def has_purchased_secret(user_id: int, content_key: str):
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –ø–æ–∫—É–ø–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç"""
    session = SessionLocal()
    try:
        # –ù–∞—Ö–æ–¥–∏–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ tg_id
        user = session.query(User).filter(User.tg_id == user_id).first()
        if not user:
            return False
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–∫—É–ø–∫–∏
        purchase = session.query(UserSecretPurchase).filter(
            UserSecretPurchase.user_id == user.id,
            UserSecretPurchase.content_key == content_key
        ).first()
        
        return purchase is not None
    finally:
        session.close() 