from typing import List, Dict
from database.models import User
from database.session import SessionLocal

ACHIEVEMENTS = {
    "major": {
        "id": "major",
        "name": "–ú–∞–∂–æ—Ä",
        "description": "–ü–æ—Ç—Ä–∞—Ç–∏—Ç—å 10,000 –º–æ–Ω–µ—Ç",
        "emoji": "üí∞",
        "condition": lambda user: user.total_spent >= 10000
    },
    "popular": {
        "id": "popular",
        "name": "–ü–æ–ø—É–ª—è—Ä–Ω—ã–π",
        "description": "–î–æ–±–∞–≤–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –ø–æ –ø–æ–∏—Å–∫—É —Ç–∏–º—ã",
        "emoji": "üåü",
        "condition": lambda user: user.team_announcements_count > 0
    },
    "fight_club": {
        "id": "fight_club",
        "name": "–ë–æ–π—Ü–æ–≤—Å–∫–∏–π –∫–ª—É–±",
        "description": "–î–æ–±–∞–≤–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –ø–æ –ø–æ–∏—Å–∫—É –∫–ª—É–±–∞",
        "emoji": "ü•ä",
        "condition": lambda user: user.club_announcements_count > 0
    },
    "explorer": {
        "id": "explorer",
        "name": "–ò—Å–∫–∞—Ç–µ–ª—å",
        "description": "–ü–æ—Å–µ—Ç–∏—Ç—å –≤—Å–µ —Ä–∞–∑–¥–µ–ª—ã –±–æ—Ç–∞",
        "emoji": "üîç",
        "condition": lambda user: len(user.visited_sections or []) >= 7
    },
    "legend": {
        "id": "legend",
        "name": "–õ–µ–≥–µ–Ω–¥–∞",
        "description": "–ö—É–ø–∏—Ç—å –ø—Ä–µ–º–∏—É–º",
        "emoji": "üëë",
        "condition": lambda user: user.is_premium
    },
    "leprechaun": {
        "id": "leprechaun",
        "name": "–õ–∏–ø—Ä–∏–∫–æ–Ω",
        "description": "–ù–∞–∫–æ–ø–∏—Ç—å 15,000 –º–æ–Ω–µ—Ç",
        "emoji": "üçÄ",
        "condition": lambda user: user.crystals >= 15000
    },
    "lucky": {
        "id": "lucky",
        "name": "–ò—Å–ø—ã—Ç–∞—Ç—å —É–¥–∞—á—É",
        "description": "–ü—Ä–∏–Ω—è—Ç—å —É—á–∞—Å—Ç–∏–µ –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ –º–æ–Ω–µ—Ç",
        "emoji": "üé≤",
        "condition": lambda user: user.participated_in_giveaway
    },
    "true_fan": {
        "id": "true_fan",
        "name": "–ü—Ä–µ–¥–∞–Ω–Ω—ã–π —Ñ–∞–Ω–∞—Ç",
        "description": "–ö—É–ø–∏—Ç—å —Å–µ–∫—Ä–µ—Ç–Ω—ã–π —Ä–æ–ª–∏–∫ –±—É–±—Å–∞",
        "emoji": "üé¨",
        "condition": lambda user: user.has_secret_video
    },
    "business": {
        "id": "business",
        "name": "–ë–∏–∑–Ω–µ—Å-–º–∞—á–æ",
        "description": "–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å —á–µ–ª–æ–≤–µ–∫–∞ –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ",
        "emoji": "üíº",
        "condition": lambda user: user.referral_count >= 1
    },
    "follow_me": {
        "id": "follow_me",
        "name": "–î–µ–ª–∞–π –∫–∞–∫ —è",
        "description": "–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å 10 —á–µ–ª–æ–≤–µ–∫ –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ",
        "emoji": "üë•",
        "condition": lambda user: user.referral_count >= 10
    },
    "true_friend": {
        "id": "true_friend",
        "name": "–ù–∞—Å—Ç–æ—è—â–∏–π –¥—Ä—É–≥",
        "description": "–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å 25 —á–µ–ª–æ–≤–µ–∫ –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ",
        "emoji": "ü§ù",
        "condition": lambda user: user.referral_count >= 25
    }
}

async def check_and_award_achievements(user_id: int) -> List[Dict]:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –≤—ã–¥–∞–µ—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –Ω–æ–≤—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
    """
    db = SessionLocal()
    try:
        user = db.query(User).filter(User.user_id == user_id).first()
        if not user:
            return []

        new_achievements = []
        user_achievements = user.achievements or []

        for achievement_id, achievement in ACHIEVEMENTS.items():
            if achievement_id not in user_achievements and achievement["condition"] and achievement["condition"](user):
                user_achievements.append(achievement_id)
                new_achievements.append(achievement)

        user.achievements = user_achievements
        db.commit()
        return new_achievements
    finally:
        db.close()

def format_achievements_message(achievements: List[str], locale: dict) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –≤—Å–µ—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –∏ –Ω–µ–ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö"""
    message = locale.get("achievements_title", "üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è:\n\n")
    message += locale.get("achievements_obtained", "‚úÖ –ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è:\n")
    
    # –°–Ω–∞—á–∞–ª–∞ –≤—ã–≤–æ–¥–∏–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
    has_obtained = False
    for ach_id in achievements:
        if ach_id in ACHIEVEMENTS:
            has_obtained = True
            achievement = ACHIEVEMENTS[ach_id]
            message += f"{achievement['emoji']} {achievement['name']} - {achievement['description']}\n"
    
    if not has_obtained:
        message += locale.get("no_achievements", "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π\n")
    
    # –ó–∞—Ç–µ–º –≤—ã–≤–æ–¥–∏–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
    message += "\n" + locale.get("achievements_missing", "üîí –î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è:\n")
    for ach_id, achievement in ACHIEVEMENTS.items():
        if ach_id not in achievements:
            message += f"{achievement['emoji']} {achievement['name']} - {achievement['description']}\n"
    
    return message 